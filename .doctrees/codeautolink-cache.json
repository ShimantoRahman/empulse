{
  "api": [],
  "guide": [],
  "guide/datasets/bank_telemarketing": [
    {
      "source": "from empulse.datasets import load_upsell_bank_telemarketing\n\ndataset = load_upsell_bank_telemarketing()",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_upsell_bank_telemarketing"
          ],
          "code_str": "load_upsell_bank_telemarketing",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_upsell_bank_telemarketing"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_upsell_bank_telemarketing"
          ],
          "code_str": "load_upsell_bank_telemarketing",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.datasets.load_upsell_bank_telemarketing"
        }
      ],
      "example": {
        "document": "guide/datasets/bank_telemarketing",
        "ref_id": "using-the-dataset",
        "headings": [
          "Bank Telemarketing Upsell Campaign",
          "Using the Dataset"
        ]
      },
      "doc_lineno": 44
    },
    {
      "source": "from empulse.datasets import load_upsell_bank_telemarketing\nfrom empulse.models import CSLogitClassifier\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, TargetEncoder\n\nX, y, tp_cost, fp_cost, fn_cost, tn_cost = load_upsell_bank_telemarketing(\n    return_X_y_costs=True,\n    as_frame=True\n)\npipeline = Pipeline([\n    ('preprocessor', ColumnTransformer([\n        ('num', StandardScaler(), X.select_dtypes(include=['number']).columns),\n        ('cat', TargetEncoder(), X.select_dtypes(include=['category']).columns)\n    ])),\n    ('model', CSLogitClassifier())\n])\npipeline.fit(\n    X,\n    y,\n    model__tp_cost=tp_cost,\n    model__fp_cost=fp_cost,\n    model__fn_cost=fn_cost,\n    model__tn_cost=tn_cost\n)",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_upsell_bank_telemarketing"
          ],
          "code_str": "load_upsell_bank_telemarketing",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_upsell_bank_telemarketing"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "compose"
          ],
          "code_str": "sklearn.compose",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.compose"
        },
        {
          "import_components": [
            "sklearn",
            "compose",
            "ColumnTransformer"
          ],
          "code_str": "ColumnTransformer",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.compose._column_transformer.ColumnTransformer"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "TargetEncoder"
          ],
          "code_str": "TargetEncoder",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._target_encoder.TargetEncoder"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_upsell_bank_telemarketing"
          ],
          "code_str": "load_upsell_bank_telemarketing",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "empulse.datasets.load_upsell_bank_telemarketing"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "compose",
            "ColumnTransformer"
          ],
          "code_str": "ColumnTransformer",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "sklearn.compose._column_transformer.ColumnTransformer"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "TargetEncoder"
          ],
          "code_str": "TargetEncoder",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._target_encoder.TargetEncoder"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()",
            "fit"
          ],
          "code_str": "pipeline.fit",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline.fit"
        }
      ],
      "example": {
        "document": "guide/datasets/bank_telemarketing",
        "ref_id": "using-the-dataset",
        "headings": [
          "Bank Telemarketing Upsell Campaign",
          "Using the Dataset"
        ]
      },
      "doc_lineno": 58
    },
    {
      "source": "from empulse.datasets import load_upsell_bank_telemarketing\n\nX, y, tp_cost, fp_cost, fn_cost, tn_cost = load_upsell_bank_telemarketing(\n    return_X_y_costs=True,\n    interest_rate=0.05,\n    term_deposit_fraction=0.30,\n    contact_cost=10,\n)",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_upsell_bank_telemarketing"
          ],
          "code_str": "load_upsell_bank_telemarketing",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_upsell_bank_telemarketing"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_upsell_bank_telemarketing"
          ],
          "code_str": "load_upsell_bank_telemarketing",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.datasets.load_upsell_bank_telemarketing"
        }
      ],
      "example": {
        "document": "guide/datasets/bank_telemarketing",
        "ref_id": "cost-matrix",
        "headings": [
          "Bank Telemarketing Upsell Campaign",
          "Cost Matrix"
        ]
      },
      "doc_lineno": 113
    }
  ],
  "guide/datasets/churn_tv_subscriptions": [
    {
      "source": "from empulse.datasets import load_churn_tv_subscriptions\n\ndataset = load_churn_tv_subscriptions()",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_churn_tv_subscriptions"
          ],
          "code_str": "load_churn_tv_subscriptions",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_churn_tv_subscriptions"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_churn_tv_subscriptions"
          ],
          "code_str": "load_churn_tv_subscriptions",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.datasets.load_churn_tv_subscriptions"
        }
      ],
      "example": {
        "document": "guide/datasets/churn_tv_subscriptions",
        "ref_id": "using-the-dataset",
        "headings": [
          "Churn in a TV Subscription Company",
          "Using the Dataset"
        ]
      },
      "doc_lineno": 43
    },
    {
      "source": "from empulse.datasets import load_churn_tv_subscriptions\nfrom empulse.models import CSLogitClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nX, y, tp_cost, fp_cost, fn_cost, tn_cost = load_churn_tv_subscriptions(\n    return_X_y_costs=True,\n    as_frame=True\n)\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', CSLogitClassifier())\n])\npipeline.fit(\n    X,\n    y,\n    model__tp_cost=tp_cost,\n    model__fp_cost=fp_cost,\n    model__fn_cost=fn_cost,\n    model__tn_cost=tn_cost\n)",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_churn_tv_subscriptions"
          ],
          "code_str": "load_churn_tv_subscriptions",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_churn_tv_subscriptions"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_churn_tv_subscriptions"
          ],
          "code_str": "load_churn_tv_subscriptions",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "empulse.datasets.load_churn_tv_subscriptions"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()",
            "fit"
          ],
          "code_str": "pipeline.fit",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline.fit"
        }
      ],
      "example": {
        "document": "guide/datasets/churn_tv_subscriptions",
        "ref_id": "using-the-dataset",
        "headings": [
          "Churn in a TV Subscription Company",
          "Using the Dataset"
        ]
      },
      "doc_lineno": 57
    }
  ],
  "guide/datasets/credit_scoring_pakdd": [
    {
      "source": "from empulse.datasets import load_credit_scoring_pakdd\n\ndataset = load_credit_scoring_pakdd()",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_credit_scoring_pakdd"
          ],
          "code_str": "load_credit_scoring_pakdd",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_credit_scoring_pakdd"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_credit_scoring_pakdd"
          ],
          "code_str": "load_credit_scoring_pakdd",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.datasets.load_credit_scoring_pakdd"
        }
      ],
      "example": {
        "document": "guide/datasets/credit_scoring_pakdd",
        "ref_id": "using-the-dataset",
        "headings": [
          "Credit Risk Assessment on a Private Label Credit Card Application",
          "Using the Dataset"
        ]
      },
      "doc_lineno": 60
    },
    {
      "source": "from empulse.datasets import load_credit_scoring_pakdd\nfrom empulse.models import CSLogitClassifier\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, TargetEncoder\n\nX, y, tp_cost, fp_cost, fn_cost, tn_cost = load_credit_scoring_pakdd(\n    return_X_y_costs=True,\n    as_frame=True\n)\npipeline = Pipeline([\n    ('preprocessor', ColumnTransformer([\n        ('num', StandardScaler(), X.select_dtypes(include=['number']).columns),\n        ('cat', TargetEncoder(), X.select_dtypes(include=['category']).columns)\n    ])),\n    ('model', CSLogitClassifier())\n])\npipeline.fit(\n    X,\n    y,\n    model__tp_cost=tp_cost,\n    model__fp_cost=fp_cost,\n    model__fn_cost=fn_cost,\n    model__tn_cost=tn_cost\n)",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_credit_scoring_pakdd"
          ],
          "code_str": "load_credit_scoring_pakdd",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_credit_scoring_pakdd"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "compose"
          ],
          "code_str": "sklearn.compose",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.compose"
        },
        {
          "import_components": [
            "sklearn",
            "compose",
            "ColumnTransformer"
          ],
          "code_str": "ColumnTransformer",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.compose._column_transformer.ColumnTransformer"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "TargetEncoder"
          ],
          "code_str": "TargetEncoder",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._target_encoder.TargetEncoder"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_credit_scoring_pakdd"
          ],
          "code_str": "load_credit_scoring_pakdd",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "empulse.datasets.load_credit_scoring_pakdd"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "compose",
            "ColumnTransformer"
          ],
          "code_str": "ColumnTransformer",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "sklearn.compose._column_transformer.ColumnTransformer"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "TargetEncoder"
          ],
          "code_str": "TargetEncoder",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._target_encoder.TargetEncoder"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()",
            "fit"
          ],
          "code_str": "pipeline.fit",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline.fit"
        }
      ],
      "example": {
        "document": "guide/datasets/credit_scoring_pakdd",
        "ref_id": "using-the-dataset",
        "headings": [
          "Credit Risk Assessment on a Private Label Credit Card Application",
          "Using the Dataset"
        ]
      },
      "doc_lineno": 74
    },
    {
      "source": "from empulse.datasets import load_credit_scoring_pakdd\n\nX, y, tp_cost, fp_cost, fn_cost, tn_cost = load_credit_scoring_pakdd(\n    return_X_y_costs=True,\n    interest_rate=0.63,\n    fund_cost=0.165,\n    max_credit_line=25000,\n    loss_given_default=0.75,\n    term_length_months=24,\n    loan_to_income_ratio=3,\n)",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_credit_scoring_pakdd"
          ],
          "code_str": "load_credit_scoring_pakdd",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_credit_scoring_pakdd"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_credit_scoring_pakdd"
          ],
          "code_str": "load_credit_scoring_pakdd",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.datasets.load_credit_scoring_pakdd"
        }
      ],
      "example": {
        "document": "guide/datasets/credit_scoring_pakdd",
        "ref_id": "cost-matrix",
        "headings": [
          "Credit Risk Assessment on a Private Label Credit Card Application",
          "Cost Matrix"
        ]
      },
      "doc_lineno": 134
    }
  ],
  "guide/datasets/give_me_some_credit": [
    {
      "source": "from empulse.datasets import load_give_me_some_credit\n\ndataset = load_give_me_some_credit()",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_give_me_some_credit"
          ],
          "code_str": "load_give_me_some_credit",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_give_me_some_credit"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_give_me_some_credit"
          ],
          "code_str": "load_give_me_some_credit",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.datasets.load_give_me_some_credit"
        }
      ],
      "example": {
        "document": "guide/datasets/give_me_some_credit",
        "ref_id": "using-the-dataset",
        "headings": [
          "2011 Kaggle competition Give Me Some Credit",
          "Using the Dataset"
        ]
      },
      "doc_lineno": 43
    },
    {
      "source": "from empulse.datasets import load_give_me_some_credit\nfrom empulse.models import CSLogitClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nX, y, tp_cost, fp_cost, fn_cost, tn_cost = load_give_me_some_credit(\n    return_X_y_costs=True,\n    as_frame=True\n)\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', CSLogitClassifier())\n])\npipeline.fit(\n    X,\n    y,\n    model__tp_cost=tp_cost,\n    model__fp_cost=fp_cost,\n    model__fn_cost=fn_cost,\n    model__tn_cost=tn_cost\n)",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_give_me_some_credit"
          ],
          "code_str": "load_give_me_some_credit",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_give_me_some_credit"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_give_me_some_credit"
          ],
          "code_str": "load_give_me_some_credit",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "empulse.datasets.load_give_me_some_credit"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()",
            "fit"
          ],
          "code_str": "pipeline.fit",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline.fit"
        }
      ],
      "example": {
        "document": "guide/datasets/give_me_some_credit",
        "ref_id": "using-the-dataset",
        "headings": [
          "2011 Kaggle competition Give Me Some Credit",
          "Using the Dataset"
        ]
      },
      "doc_lineno": 57
    },
    {
      "source": "from empulse.datasets import load_give_me_some_credit\n\nX, y, tp_cost, fp_cost, fn_cost, tn_cost = load_give_me_some_credit(\n    return_X_y_costs=True,\n    interest_rate=0.0479,\n    fund_cost=0.0294,\n    max_credit_line=25000,\n    loss_given_default=0.75,\n    term_length_months=24,\n    loan_to_income_ratio=3,\n)",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_give_me_some_credit"
          ],
          "code_str": "load_give_me_some_credit",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_give_me_some_credit"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_give_me_some_credit"
          ],
          "code_str": "load_give_me_some_credit",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.datasets.load_give_me_some_credit"
        }
      ],
      "example": {
        "document": "guide/datasets/give_me_some_credit",
        "ref_id": "cost-matrix",
        "headings": [
          "2011 Kaggle competition Give Me Some Credit",
          "Cost Matrix"
        ]
      },
      "doc_lineno": 113
    }
  ],
  "guide/datasets_guide": [],
  "guide/instance_based_cv": [
    {
      "source": "from sklearn import set_config\n\nset_config(enable_metadata_routing=True)",
      "names": [
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        }
      ],
      "example": {
        "document": "guide/instance_based_cv",
        "ref_id": "enabling-metadata-routing",
        "headings": [
          "Cross-Validation with Instance-dependent Costs",
          "Enabling Metadata Routing"
        ]
      },
      "doc_lineno": 28
    },
    {
      "source": "from sklearn import config_context\n\nwith config_context(enable_metadata_routing=True):\n    # code that uses metadata routing\n    ...",
      "names": [
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "sklearn.config_context"
        }
      ],
      "example": {
        "document": "guide/instance_based_cv",
        "ref_id": "enabling-metadata-routing",
        "headings": [
          "Cross-Validation with Instance-dependent Costs",
          "Enabling Metadata Routing"
        ]
      },
      "doc_lineno": 36
    },
    {
      "source": "from empulse.models import CSLogitClassifier\n\ncslogit = CSLogitClassifier().set_fit_request(fp_cost=True)",
      "names": [
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        }
      ],
      "example": {
        "document": "guide/instance_based_cv",
        "ref_id": "what-is-metadata-routing",
        "headings": [
          "Cross-Validation with Instance-dependent Costs",
          "What is Metadata Routing"
        ]
      },
      "doc_lineno": 58
    },
    {
      "source": "from empulse.samplers import CostSensitiveSampler\n\nsampler = CostSensitiveSampler().set_fit_resample_request(fp_cost=True)",
      "names": [
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        }
      ],
      "example": {
        "document": "guide/instance_based_cv",
        "ref_id": "what-is-metadata-routing",
        "headings": [
          "Cross-Validation with Instance-dependent Costs",
          "What is Metadata Routing"
        ]
      },
      "doc_lineno": 66
    },
    {
      "source": "from empulse.metrics import expected_savings_score\nfrom sklearn.metrics import make_scorer\n\nscorer = make_scorer(\n    expected_savings_score,\n    greater_is_better=True,\n    response_method='predict_proba',\n).set_score_request(fp_cost=True)",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_savings_score"
          ],
          "code_str": "expected_savings_score",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.expected_savings_score"
        },
        {
          "import_components": [
            "sklearn",
            "metrics"
          ],
          "code_str": "sklearn.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.metrics"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_savings_score"
          ],
          "code_str": "expected_savings_score",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.expected_savings_score"
        }
      ],
      "example": {
        "document": "guide/instance_based_cv",
        "ref_id": "what-is-metadata-routing",
        "headings": [
          "Cross-Validation with Instance-dependent Costs",
          "What is Metadata Routing"
        ]
      },
      "doc_lineno": 80
    },
    {
      "source": "import numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification()\nfp_cost = np.random.rand(X.shape[0])  # instance-dependent costs\n\ncross_val_score(cslogit, X, y, scoring=scorer, params={\"fp_cost\": fp_cost})",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        }
      ],
      "example": {
        "document": "guide/instance_based_cv",
        "ref_id": "what-is-metadata-routing",
        "headings": [
          "Cross-Validation with Instance-dependent Costs",
          "What is Metadata Routing"
        ]
      },
      "doc_lineno": 94
    },
    {
      "source": "import numpy as np\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import GridSearchCV, StratifiedKFold\nfrom sklearn.metrics import make_scorer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom empulse.models import CSLogitClassifier\nfrom empulse.metrics import expected_cost_loss\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification()\nfp_cost = np.random.rand(X.shape[0])\nfn_cost = np.random.rand(X.shape[0])\n\nscorer = make_scorer(\n    expected_cost_loss,\n    greater_is_better=False,\n    response_method='predict_proba',\n).set_score_request(fp_cost=True, fn_cost=True)\n\npipe = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', CSLogitClassifier().set_fit_request(fp_cost=True, fn_cost=True))\n])\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\nparam_grid = {'model__C': [0.1, 1]}\ngrid_search = GridSearchCV(pipe, param_grid, cv=cv, scoring=scorer)\ngrid_search.fit(X, y, fp_cost=fp_cost, fn_cost=fn_cost)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold"
          ],
          "code_str": "StratifiedKFold",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "metrics"
          ],
          "code_str": "sklearn.metrics",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.metrics"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 9,
          "end_lineno": 9,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_cost_loss"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 9,
          "end_lineno": 9,
          "context": "import_target",
          "resolved_location": "empulse.metrics.expected_cost_loss"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_cost_loss"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "empulse.metrics.expected_cost_loss"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipe",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold"
          ],
          "code_str": "StratifiedKFold",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold",
            "()"
          ],
          "code_str": "cv",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipe",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold",
            "()"
          ],
          "code_str": "cv",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "grid_search",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "guide/instance_based_cv",
        "ref_id": "gridsearch-example",
        "headings": [
          "Cross-Validation with Instance-dependent Costs",
          "Gridsearch Example"
        ]
      },
      "doc_lineno": 116
    }
  ],
  "guide/metrics/choosing_metric": [
    {
      "source": "tp_cost = 0\nfp_cost = 5\nfn_cost = 1\ntn_cost = 0",
      "names": [],
      "example": {
        "document": "guide/metrics/choosing_metric",
        "ref_id": "cost-matrix",
        "headings": [
          "Choosing the right metric",
          "Cost Matrix"
        ]
      },
      "doc_lineno": 38
    },
    {
      "source": "tp_benefit = 5\nfp_cost = 0\nfn_cost = 0\ntn_benefit = 1",
      "names": [],
      "example": {
        "document": "guide/metrics/choosing_metric",
        "ref_id": "cost-matrix",
        "headings": [
          "Choosing the right metric",
          "Cost Matrix"
        ]
      },
      "doc_lineno": 70
    },
    {
      "source": "tp_cost = 1\nfp_cost = 1\nfn_cost = 1\ntn_cost = 1",
      "names": [],
      "example": {
        "document": "guide/metrics/choosing_metric",
        "ref_id": "instance-dependent-costs",
        "headings": [
          "Choosing the right metric",
          "Instance-dependent Costs"
        ]
      },
      "doc_lineno": 152
    },
    {
      "source": "tp_cost = [1, 2, 3, 4, 5]\nfp_cost = [1, 2, 3, 4, 5]\nfn_cost = [1, 2, 3, 4, 5]\ntn_cost = [1, 2, 3, 4, 5]",
      "names": [],
      "example": {
        "document": "guide/metrics/choosing_metric",
        "ref_id": "instance-dependent-costs",
        "headings": [
          "Choosing the right metric",
          "Instance-dependent Costs"
        ]
      },
      "doc_lineno": 161
    }
  ],
  "guide/metrics/metric_class_in_model": [
    {
      "source": "import numpy as np\nimport sympy\nfrom empulse.metrics import Metric, Cost, CostMatrix\nfrom empulse.models import CSBoostClassifier\nfrom sklearn.datasets import make_classification\n\n\nX, y = make_classification(n_samples=1000, n_features=20, random_state=42)\nclvs = np.random.uniform(100, 200, size=y.shape[0])\n\nclv, d, f, gamma = sympy.symbols('clv d f gamma')\n\ncost_matrix = (\n    CostMatrix()\n    .add_tp_benefit(gamma * (clv - d - f))\n    .add_tp_benefit((1 - gamma) * -f)\n    .add_fp_cost(d + f)\n    .alias('accept_rate', gamma)\n    .alias('incentive_cost', d)\n    .alias('contact_cost', f)\n)\ncost_loss = Metric(cost_matrix, Cost())\n\nmodel = CSBoostClassifier(loss=cost_loss)\nmodel.fit(X, y, accept_rate=0.3, incentive_cost=10, clv=clvs, contact_cost=1)\ny_proba = model.predict_proba(X)[:, 1]",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sympy"
          ],
          "code_str": "sympy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sympy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier"
          ],
          "code_str": "CSBoostClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "uniform"
          ],
          "code_str": "np.random.uniform",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.random.uniform"
        },
        {
          "import_components": [
            "sympy",
            "symbols"
          ],
          "code_str": "sympy.symbols",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sympy.core.symbol.symbols"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "cost_loss",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier"
          ],
          "code_str": "CSBoostClassifier",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "cost_loss",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        }
      ],
      "example": {
        "document": "guide/metrics/metric_class_in_model",
        "ref_id": "use-your-custom-metric-inside-a-model",
        "headings": [
          "Use your custom metric inside a model"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "guide/metrics/user_defined_value_metric": [
    {
      "source": "import sympy\n\nclv, d, f, gamma = sympy.symbols('clv d f gamma')",
      "names": [
        {
          "import_components": [
            "sympy"
          ],
          "code_str": "sympy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sympy"
        },
        {
          "import_components": [
            "sympy",
            "symbols"
          ],
          "code_str": "sympy.symbols",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "sympy.core.symbol.symbols"
        }
      ],
      "example": {
        "document": "guide/metrics/user_defined_value_metric",
        "ref_id": "implementing-the-mpc-measure",
        "headings": [
          "Define your own cost-sensitive or value metric",
          "Implementing the MPC measure"
        ]
      },
      "doc_lineno": 41
    },
    {
      "source": "from empulse.metrics import CostMatrix\n\ncost_matrix = CostMatrix()",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix",
            "()"
          ],
          "code_str": "cost_matrix",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        }
      ],
      "example": {
        "document": "guide/metrics/user_defined_value_metric",
        "ref_id": "implementing-the-mpc-measure",
        "headings": [
          "Define your own cost-sensitive or value metric",
          "Implementing the MPC measure"
        ]
      },
      "doc_lineno": 49
    },
    {
      "source": "cost_matrix.add_tp_benefit(gamma * (clv - d - f))\ncost_matrix.add_tp_benefit((1 - gamma) * -f)\ncost_matrix.add_fp_cost(d + f)",
      "names": [],
      "example": {
        "document": "guide/metrics/user_defined_value_metric",
        "ref_id": "implementing-the-mpc-measure",
        "headings": [
          "Define your own cost-sensitive or value metric",
          "Implementing the MPC measure"
        ]
      },
      "doc_lineno": 61
    },
    {
      "source": "from empulse.metrics import Metric, MaxProfit\n\nmpc_score = Metric(cost_matrix=cost_matrix, strategy=MaxProfit())",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "MaxProfit"
          ],
          "code_str": "MaxProfit",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.metric_strategies.MaxProfit"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "MaxProfit"
          ],
          "code_str": "MaxProfit",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric_strategies.MaxProfit"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "mpc_score",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        }
      ],
      "example": {
        "document": "guide/metrics/user_defined_value_metric",
        "ref_id": "implementing-the-mpc-measure",
        "headings": [
          "Define your own cost-sensitive or value metric",
          "Implementing the MPC measure"
        ]
      },
      "doc_lineno": 70
    },
    {
      "source": "y_true = [0, 1, 0, 1, 0, 1, 0, 1]\ny_proba = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n\nmpc_score(y_true, y_proba, clv=100, d=10, f=1, gamma=0.3)",
      "names": [],
      "example": {
        "document": "guide/metrics/user_defined_value_metric",
        "ref_id": "implementing-the-mpc-measure",
        "headings": [
          "Define your own cost-sensitive or value metric",
          "Implementing the MPC measure"
        ]
      },
      "doc_lineno": 78
    },
    {
      "source": "cost_matrix.alias({'incentive_cost': 'd', 'contact_cost': 'f', 'accept_rate': 'gamma'})\nmpc_score = Metric(cost_matrix=cost_matrix, strategy=MaxProfit())\nmpc_score(y_true, y_proba, clv=100, incentive_cost=10, contact_cost=1, accept_rate=0.3)",
      "names": [],
      "example": {
        "document": "guide/metrics/user_defined_value_metric",
        "ref_id": "implementing-the-mpc-measure",
        "headings": [
          "Define your own cost-sensitive or value metric",
          "Implementing the MPC measure"
        ]
      },
      "doc_lineno": 88
    },
    {
      "source": "cost_matrix.set_default(incentive_cost=10, contact_cost=1, accept_rate=0.3)\nmpc_score = Metric(cost_matrix=cost_matrix, strategy=MaxProfit())\nmpc_score(y_true, y_proba, clv=100)",
      "names": [],
      "example": {
        "document": "guide/metrics/user_defined_value_metric",
        "ref_id": "implementing-the-mpc-measure",
        "headings": [
          "Define your own cost-sensitive or value metric",
          "Implementing the MPC measure"
        ]
      },
      "doc_lineno": 97
    },
    {
      "source": "clv, d, f, alpha, beta = sympy.symbols('clv d f alpha beta')\ngamma = sympy.stats.Beta('gamma', alpha, beta)\n\ngamma_cost_matrix = (\n    CostMatrix()\n    .add_tp_benefit(gamma * (clv - d - f))\n    .add_tp_benefit((1 - gamma) * -f)\n    .add_fp_cost(d + f)\n    .alias({'incentive_cost': 'd', 'contact_cost': 'f', 'accept_rate': 'gamma'})\n    .set_default(incentive_cost=10, contact_cost=1, alpha=6, beta=14)\n)\nempc_score = Metric(cost_matrix=gamma_cost_matrix, strategy=MaxProfit())\n\nempc_score(y_true, y_proba, clv=100)",
      "names": [],
      "example": {
        "document": "guide/metrics/user_defined_value_metric",
        "ref_id": "implementing-the-empc-measure",
        "headings": [
          "Define your own cost-sensitive or value metric",
          "Implementing the EMPC measure"
        ]
      },
      "doc_lineno": 115
    },
    {
      "source": "clv, d, f = sympy.symbols('clv d f')\ngamma = sympy.stats.Uniform('gamma', 0, 1)\n\nuniform_cost_matrix = (\n    CostMatrix()\n    .add_tp_benefit(gamma * (clv - d - f))\n    .add_tp_benefit((1 - gamma) * -f)\n    .add_fp_cost(d + f)\n    .alias({'incentive_cost': 'd', 'contact_cost': 'f', 'accept_rate': 'gamma'})\n    .set_default(incentive_cost=10, contact_cost=1)\n)\nempc_score = Metric(cost_matrix=uniform_cost_matrix, strategy=MaxProfit())\n\nempc_score(y_true, y_proba, clv=100)",
      "names": [],
      "example": {
        "document": "guide/metrics/user_defined_value_metric",
        "ref_id": "implementing-the-empc-measure",
        "headings": [
          "Define your own cost-sensitive or value metric",
          "Implementing the EMPC measure"
        ]
      },
      "doc_lineno": 134
    },
    {
      "source": "d, f, gamma, alpha, beta = sympy.symbols('d f gamma alpha beta')\nclv = sympy.stats.Gamma('clv', alpha, beta)\n\nclv_cost_matrix = (\n    CostMatrix()\n    .add_tp_benefit(gamma * (clv - d - f))\n    .add_tp_benefit((1 - gamma) * -f)\n    .add_fp_cost(d + f)\n    .alias({'incentive_cost': 'd', 'contact_cost': 'f', 'accept_rate': 'gamma'})\n    .set_default(incentive_cost=10, contact_cost=1, accept_rate=0.3)\n)\nempc_score = Metric(cost_matrix=clv_cost_matrix, strategy=MaxProfit())\n\nempc_score(y_true, y_proba, alpha=6, beta=10)",
      "names": [],
      "example": {
        "document": "guide/metrics/user_defined_value_metric",
        "ref_id": "implementing-the-empc-measure",
        "headings": [
          "Define your own cost-sensitive or value metric",
          "Implementing the EMPC measure"
        ]
      },
      "doc_lineno": 154
    },
    {
      "source": "from empulse.metrics import Cost\n\nexpected_cost_loss = Metric(cost_matrix=cost_matrix, strategy=Cost())\nexpected_cost_loss(y_true, y_proba, clv=100)",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        }
      ],
      "example": {
        "document": "guide/metrics/user_defined_value_metric",
        "ref_id": "expected-cost",
        "headings": [
          "Define your own cost-sensitive or value metric",
          "Implementing expected cost and savings",
          "Expected Cost"
        ]
      },
      "doc_lineno": 180
    },
    {
      "source": "from empulse.metrics import Savings\n\nexpected_savings_score = Metric(cost_matrix=cost_matrix, strategy=Savings())\nexpected_savings_score(y_true, y_proba, clv=100)",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Savings"
          ],
          "code_str": "Savings",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.savings_metric.Savings"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Savings"
          ],
          "code_str": "Savings",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.savings_metric.Savings"
        }
      ],
      "example": {
        "document": "guide/metrics/user_defined_value_metric",
        "ref_id": "expected-savings",
        "headings": [
          "Define your own cost-sensitive or value metric",
          "Implementing expected cost and savings",
          "Expected Savings"
        ]
      },
      "doc_lineno": 190
    }
  ],
  "guide/metrics_guide": [],
  "guide/models/cost_functions": [
    {
      "source": "import xgboost as xgb\nfrom sklearn.datasets import make_classification\nfrom empulse.metrics import make_objective_aec\n\nX, y = make_classification()\ncost_function = make_objective_aec(fp_cost=5, fn_cost=1, tp_cost=1, tn_cost=1)\nclf = xgb.XGBClassifier(objective=cost_function, n_estimators=100, max_depth=3)\nclf.fit(X, y)",
      "names": [
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "make_objective_aec"
          ],
          "code_str": "make_objective_aec",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.metrics.make_objective_aec"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "make_objective_aec"
          ],
          "code_str": "make_objective_aec",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "empulse.metrics.make_objective_aec"
        },
        {
          "import_components": [
            "xgboost",
            "XGBClassifier"
          ],
          "code_str": "xgb.XGBClassifier",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        },
        {
          "import_components": [
            "xgboost",
            "XGBClassifier",
            "()"
          ],
          "code_str": "clf",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        }
      ],
      "example": {
        "document": "guide/models/cost_functions",
        "ref_id": "boosting-algorithms-custom-cost-functions",
        "headings": [
          "Boosting Algorithms Custom Cost Functions"
        ]
      },
      "doc_lineno": 17
    }
  ],
  "guide/models/csboost": [
    {
      "source": "from empulse.models import CSBoostClassifier\nfrom xgboost import XGBClassifier\n\ncsboost = CSBoostClassifier(XGBClassifier(n_estimators=100, max_depth=3))",
      "names": [
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier"
          ],
          "code_str": "CSBoostClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        },
        {
          "import_components": [
            "xgboost",
            "XGBClassifier"
          ],
          "code_str": "XGBClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier"
          ],
          "code_str": "CSBoostClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        },
        {
          "import_components": [
            "xgboost",
            "XGBClassifier"
          ],
          "code_str": "XGBClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier",
            "()"
          ],
          "code_str": "csboost",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        }
      ],
      "example": {
        "document": "guide/models/csboost",
        "ref_id": "id1",
        "headings": [
          "Cost-Sensitive Gradient Boosting (CSBoost & B2Boost)",
          "CSBoost"
        ]
      },
      "doc_lineno": 17
    },
    {
      "source": "from sklearn.model_selection import GridSearchCV\n\ncsboost = CSBoostClassifier(XGBClassifier())\nparam_grid = {'estimator__max_depth': [3, 5]}\ngrid_search = GridSearchCV(csboost, param_grid, cv=2)",
      "names": [
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "grid_search",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "guide/models/csboost",
        "ref_id": "id1",
        "headings": [
          "Cost-Sensitive Gradient Boosting (CSBoost & B2Boost)",
          "CSBoost"
        ]
      },
      "doc_lineno": 31
    },
    {
      "source": "csboost = CSBoostClassifier(fp_cost=5, fn_cost=1, tp_cost=1, tn_cost=1)",
      "names": [],
      "example": {
        "document": "guide/models/csboost",
        "ref_id": "cost-matrix",
        "headings": [
          "Cost-Sensitive Gradient Boosting (CSBoost & B2Boost)",
          "Cost Matrix"
        ]
      },
      "doc_lineno": 44
    },
    {
      "source": "import numpy as np\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification()\nfp_cost = np.random.rand(X.shape[0])  # instance-dependent costs\ncsboost = CSBoostClassifier(fn_cost=1, tp_cost=1, tn_cost=1)  # class-dependent costs\n\ncsboost.fit(X, y, fp_cost=fp_cost)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        }
      ],
      "example": {
        "document": "guide/models/csboost",
        "ref_id": "cost-matrix",
        "headings": [
          "Cost-Sensitive Gradient Boosting (CSBoost & B2Boost)",
          "Cost Matrix"
        ]
      },
      "doc_lineno": 50
    },
    {
      "source": "import numpy as np\nfrom sklearn.datasets import make_classification\nfrom empulse.models import B2BoostClassifier\n\nX, y = make_classification()\nclv = np.random.rand(X.shape[0]) * 100\nb2boost = B2BoostClassifier(\n    estimator=XGBClassifier(n_estimators=100, max_depth=3),\n    accept_rate=0.2,\n    incentive_fraction = 0.05,\n    contact_cost = 10,\n)  # class-dependent costs\n\nb2boost.fit(X, y, clv=clv)  # instance-dependent costs",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "B2BoostClassifier"
          ],
          "code_str": "B2BoostClassifier",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.b2boost.B2BoostClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "B2BoostClassifier"
          ],
          "code_str": "B2BoostClassifier",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.b2boost.B2BoostClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "B2BoostClassifier",
            "()"
          ],
          "code_str": "b2boost",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.b2boost.B2BoostClassifier"
        }
      ],
      "example": {
        "document": "guide/models/csboost",
        "ref_id": "b2boost",
        "headings": [
          "Cost-Sensitive Gradient Boosting (CSBoost & B2Boost)",
          "B2Boost"
        ]
      },
      "doc_lineno": 77
    }
  ],
  "guide/models/cslogit": [
    {
      "source": "from empulse.models import CSLogitClassifier\n\ncslogit = CSLogitClassifier(C=100, l1_ratio=0.2)",
      "names": [
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier",
            "()"
          ],
          "code_str": "cslogit",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        }
      ],
      "example": {
        "document": "guide/models/cslogit",
        "ref_id": "regularization",
        "headings": [
          "Cost-Sensitive Logistic Regression (CSLogit)",
          "Regularization"
        ]
      },
      "doc_lineno": 19
    },
    {
      "source": "cslogit = CSLogitClassifier(fp_cost=5, fn_cost=1, tp_cost=1, tn_cost=1)",
      "names": [],
      "example": {
        "document": "guide/models/cslogit",
        "ref_id": "cost-matrix",
        "headings": [
          "Cost-Sensitive Logistic Regression (CSLogit)",
          "Cost Matrix"
        ]
      },
      "doc_lineno": 30
    },
    {
      "source": "import numpy as np\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification()\nfp_cost = np.random.rand(X.shape[0])  # instance-dependent costs\ncslogit = CSLogitClassifier(fn_cost=1, tp_cost=1, tn_cost=1)  # class-dependent costs\n\ncslogit.fit(X, y, fp_cost=fp_cost)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        }
      ],
      "example": {
        "document": "guide/models/cslogit",
        "ref_id": "cost-matrix",
        "headings": [
          "Cost-Sensitive Logistic Regression (CSLogit)",
          "Cost Matrix"
        ]
      },
      "doc_lineno": 36
    },
    {
      "source": "from empulse.metrics import Metric, Savings, CostMatrix\n\nsavings_score = Metric(\n    cost_matrix=CostMatrix().add_fp_cost('fp').add_fn_cost('fn'),\n    strategy=Savings()\n)\n\ncslogit = CSLogitClassifier(loss=savings_score)",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Savings"
          ],
          "code_str": "Savings",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.savings_metric.Savings"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Savings"
          ],
          "code_str": "Savings",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.savings_metric.Savings"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "savings_score",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "savings_score",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        }
      ],
      "example": {
        "document": "guide/models/cslogit",
        "ref_id": "custom-loss-functions",
        "headings": [
          "Cost-Sensitive Logistic Regression (CSLogit)",
          "Optimization",
          "Custom Loss Functions"
        ]
      },
      "doc_lineno": 64
    },
    {
      "source": "from scipy.optimize import minimize, OptimizeResult\n\ndef optimize(objective, X, max_iter=10000, **kwargs) -> OptimizeResult:\n    initial_guess = np.zeros(X.shape[1])\n    bounds = [(-5, 5)] * X.shape[1]\n    result = minimize(\n        objective,\n        initial_guess,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={\n            'maxiter': max_iter,\n            'ftol': 1e-4,\n        },\n        **kwargs\n    )\n    return result\n\ncslogit = CSLogitClassifier(optimize_fn=optimize)",
      "names": [
        {
          "import_components": [
            "scipy",
            "optimize"
          ],
          "code_str": "scipy.optimize",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "scipy.optimize"
        },
        {
          "import_components": [
            "scipy",
            "optimize",
            "minimize"
          ],
          "code_str": "minimize",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "scipy.optimize.minimize"
        },
        {
          "import_components": [
            "scipy",
            "optimize",
            "OptimizeResult"
          ],
          "code_str": "OptimizeResult",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "scipy.optimize._optimize.OptimizeResult"
        },
        {
          "import_components": [
            "scipy",
            "optimize",
            "OptimizeResult"
          ],
          "code_str": "OptimizeResult",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "scipy.optimize._optimize.OptimizeResult"
        },
        {
          "import_components": [
            "scipy",
            "optimize",
            "minimize"
          ],
          "code_str": "minimize",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "scipy.optimize.minimize"
        }
      ],
      "example": {
        "document": "guide/models/cslogit",
        "ref_id": "custom-optimization-algorithms",
        "headings": [
          "Cost-Sensitive Logistic Regression (CSLogit)",
          "Optimization",
          "Custom Optimization Algorithms"
        ]
      },
      "doc_lineno": 83
    },
    {
      "source": "def optimize(objective, X, max_iter=10000, **kwargs) -> OptimizeResult:\n    initial_guess = np.zeros(X.shape[1])\n    bounds = [(-5, 5)] * X.shape[1]\n    result = minimize(\n        objective,\n        initial_guess,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={\n            'maxiter': max_iter,\n            'ftol': 1e-4,\n        },\n        **kwargs\n    )\n    return result\n\ncslogit = CSLogitClassifier(optimize_fn=optimize, optimizer_params={'max_iter': 1000})",
      "names": [],
      "example": {
        "document": "guide/models/cslogit",
        "ref_id": "custom-optimization-algorithms",
        "headings": [
          "Cost-Sensitive Logistic Regression (CSLogit)",
          "Optimization",
          "Custom Optimization Algorithms"
        ]
      },
      "doc_lineno": 109
    }
  ],
  "guide/models/proflogit": [
    {
      "source": "from empulse.models import ProfLogitClassifier\nfrom empulse.metrics import empc_score\n\nproflogit = ProfLogitClassifier(loss=empc_score, C=100, l1_ratio=0.2)",
      "names": [
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "ProfLogitClassifier"
          ],
          "code_str": "ProfLogitClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.models.proflogit.ProfLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empc_score"
          ],
          "code_str": "empc_score",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empc_score"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "ProfLogitClassifier"
          ],
          "code_str": "ProfLogitClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.models.proflogit.ProfLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empc_score"
          ],
          "code_str": "empc_score",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.metrics.empc_score"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "ProfLogitClassifier",
            "()"
          ],
          "code_str": "proflogit",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.models.proflogit.ProfLogitClassifier"
        }
      ],
      "example": {
        "document": "guide/models/proflogit",
        "ref_id": "regularization",
        "headings": [
          "Profit-Driven Logistic Regression (ProfLogit)",
          "Regularization"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": "from empulse.models import ProfLogitClassifier\n\nproflogit = ProfLogitClassifier(\n    empc_score, optimizer_params={'max_iter': 10000, 'tolerance': 1e-3, 'patience': 100}\n)",
      "names": [
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "ProfLogitClassifier"
          ],
          "code_str": "ProfLogitClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.models.proflogit.ProfLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "ProfLogitClassifier"
          ],
          "code_str": "ProfLogitClassifier",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.models.proflogit.ProfLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "ProfLogitClassifier",
            "()"
          ],
          "code_str": "proflogit",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.models.proflogit.ProfLogitClassifier"
        }
      ],
      "example": {
        "document": "guide/models/proflogit",
        "ref_id": "custom-stopping-conditions",
        "headings": [
          "Profit-Driven Logistic Regression (ProfLogit)",
          "Optimization",
          "Custom Stopping Conditions"
        ]
      },
      "doc_lineno": 43
    },
    {
      "source": "from empulse.optimizers import Generation\nfrom scipy.optimize import OptimizeResult\nfrom time import perf_counter\n\ndef optimize(objective, X, max_time=5, **kwargs) -> OptimizeResult:\n    generation = Generation(**kwargs)\n    bounds = [(-5, 5)] * X.shape[1]\n\n    start = perf_counter()\n    for _ in generation.optimize(objective, bounds):\n        if perf_counter() - start > max_time:\n            generation.result.message = \"Maximum time reached.\"\n            generation.result.success = True\n            break\n    return generation.result\n\nproflogit = ProfLogitClassifier(empc_score, optimize_fn=optimize, optimizer_params={'max_time': 10})",
      "names": [
        {
          "import_components": [
            "empulse",
            "optimizers"
          ],
          "code_str": "empulse.optimizers",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.optimizers"
        },
        {
          "import_components": [
            "empulse",
            "optimizers",
            "Generation"
          ],
          "code_str": "Generation",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.optimizers.generation.Generation"
        },
        {
          "import_components": [
            "scipy",
            "optimize"
          ],
          "code_str": "scipy.optimize",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "scipy.optimize"
        },
        {
          "import_components": [
            "scipy",
            "optimize",
            "OptimizeResult"
          ],
          "code_str": "OptimizeResult",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "scipy.optimize._optimize.OptimizeResult"
        },
        {
          "import_components": [
            "time"
          ],
          "code_str": "time",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "time"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "perf_counter",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "scipy",
            "optimize",
            "OptimizeResult"
          ],
          "code_str": "OptimizeResult",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "scipy.optimize._optimize.OptimizeResult"
        },
        {
          "import_components": [
            "empulse",
            "optimizers",
            "Generation"
          ],
          "code_str": "Generation",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "empulse.optimizers.generation.Generation"
        },
        {
          "import_components": [
            "empulse",
            "optimizers",
            "Generation",
            "()"
          ],
          "code_str": "generation",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "empulse.optimizers.generation.Generation"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "perf_counter",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "perf_counter",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "time.perf_counter"
        }
      ],
      "example": {
        "document": "guide/models/proflogit",
        "ref_id": "custom-stopping-conditions",
        "headings": [
          "Profit-Driven Logistic Regression (ProfLogit)",
          "Optimization",
          "Custom Stopping Conditions"
        ]
      },
      "doc_lineno": 55
    },
    {
      "source": "def optimize(objective, X, max_evals=10_000, **kwargs) -> OptimizeResult:\n    generation = Generation(**kwargs)\n    bounds = [(-5, 5)] * X.shape[1]\n\n    for _ in rga.optimize(objective, bounds):\n        if generation.result.nfev > max_evals:\n            generation.result.message = \"Maximum number of evaluations reached.\"\n            generation.result.success = True\n            break\n    return generation.result\n\nproflogit = ProfLogitClassifier(empc_score, optimize_fn=optimize, optimizer_params={'max_evals': 10_000})",
      "names": [],
      "example": {
        "document": "guide/models/proflogit",
        "ref_id": "custom-stopping-conditions",
        "headings": [
          "Profit-Driven Logistic Regression (ProfLogit)",
          "Optimization",
          "Custom Stopping Conditions"
        ]
      },
      "doc_lineno": 77
    },
    {
      "source": "from empulse.metrics import empa_score\n\nproflogit = ProfLogitClassifier(loss=empa_score)",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empa_score"
          ],
          "code_str": "empa_score",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empa_score"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empa_score"
          ],
          "code_str": "empa_score",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.empa_score"
        }
      ],
      "example": {
        "document": "guide/models/proflogit",
        "ref_id": "custom-loss-functions",
        "headings": [
          "Profit-Driven Logistic Regression (ProfLogit)",
          "Optimization",
          "Custom Loss Functions"
        ]
      },
      "doc_lineno": 99
    },
    {
      "source": "import numpy as np\n\ndef optimize(objective, X, max_iter=10000, **kwargs) -> OptimizeResult:\n    initial_guess = np.zeros(X.shape[1])\n    bounds = [(-5, 5)] * X.shape[1]\n    result = minimize(\n        lambda x: -objective(x),  # inverse objective function\n        initial_guess,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={\n            'maxiter': max_iter,\n            'ftol': 1e-4,\n        },\n        **kwargs\n    )\n    return result\n\nproflogit = ProfLogitClassifier(empc_score, optimize_fn=optimize)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.zeros"
        }
      ],
      "example": {
        "document": "guide/models/proflogit",
        "ref_id": "custom-optimization-algorithms",
        "headings": [
          "Profit-Driven Logistic Regression (ProfLogit)",
          "Optimization",
          "Custom Optimization Algorithms"
        ]
      },
      "doc_lineno": 112
    },
    {
      "source": "def optimize(objective, X, **kwargs) -> OptimizeResult:\n    initial_guess = np.zeros(X.shape[1])\n    result = minimize(\n        lambda x: -objective(x),  # inverse objective function\n        initial_guess,\n        method='BFGS',\n        **kwargs\n    )\n    return result\n\nproflogit = ProfLogitClassifier(empc_score, optimize_fn=optimize)",
      "names": [],
      "example": {
        "document": "guide/models/proflogit",
        "ref_id": "custom-optimization-algorithms",
        "headings": [
          "Profit-Driven Logistic Regression (ProfLogit)",
          "Optimization",
          "Custom Optimization Algorithms"
        ]
      },
      "doc_lineno": 138
    }
  ],
  "guide/models/robustcs": [
    {
      "source": "from empulse.models import RobustCSClassifier\nfrom empulse.models import CSLogitClassifier\n\nrobust_cslogit = RobustCSClassifier(estimator=CSLogitClassifier())",
      "names": [
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier"
          ],
          "code_str": "RobustCSClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier"
          ],
          "code_str": "RobustCSClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier",
            "()"
          ],
          "code_str": "robust_cslogit",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        }
      ],
      "example": {
        "document": "guide/models/robustcs",
        "ref_id": "usage",
        "headings": [
          "Robust Cost-Sensitive Classification (RobustCS)",
          "Usage"
        ]
      },
      "doc_lineno": 28
    },
    {
      "source": "from sklearn.linear_model import HuberRegressor\n\nrobust_cslogit = RobustCSClassifier(\n    CSLogitClassifier(),\n    outlier_estimator=HuberRegressor(max_iter=50)\n)",
      "names": [
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "HuberRegressor"
          ],
          "code_str": "HuberRegressor",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._huber.HuberRegressor"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "HuberRegressor"
          ],
          "code_str": "HuberRegressor",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.linear_model._huber.HuberRegressor"
        }
      ],
      "example": {
        "document": "guide/models/robustcs",
        "ref_id": "usage",
        "headings": [
          "Robust Cost-Sensitive Classification (RobustCS)",
          "Usage"
        ]
      },
      "doc_lineno": 39
    },
    {
      "source": "robust_cslogit = RobustCSClassifier(CSLogitClassifier(), outlier_threshold=3)",
      "names": [],
      "example": {
        "document": "guide/models/robustcs",
        "ref_id": "usage",
        "headings": [
          "Robust Cost-Sensitive Classification (RobustCS)",
          "Usage"
        ]
      },
      "doc_lineno": 52
    },
    {
      "source": "robust_cslogit = RobustCSClassifier(CSLogitClassifier(), detect_outliers_for='fp_cost')",
      "names": [],
      "example": {
        "document": "guide/models/robustcs",
        "ref_id": "usage",
        "headings": [
          "Robust Cost-Sensitive Classification (RobustCS)",
          "Usage"
        ]
      },
      "doc_lineno": 60
    },
    {
      "source": "robust_cslogit = RobustCSClassifier(\n    CSLogitClassifier(),\n    detect_outliers_for=['fp_cost', 'fn_cost']\n)",
      "names": [],
      "example": {
        "document": "guide/models/robustcs",
        "ref_id": "usage",
        "headings": [
          "Robust Cost-Sensitive Classification (RobustCS)",
          "Usage"
        ]
      },
      "doc_lineno": 66
    },
    {
      "source": "import numpy as np\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification()\nfp_cost = np.random.rand(X.shape[0])  # instance-dependent costs\n\nrobust_cslogit = RobustCSClassifier(CSLogitClassifier())\nrobust_cslogit.fit(X, y, fp_cost=fp_cost)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        }
      ],
      "example": {
        "document": "guide/models/robustcs",
        "ref_id": "usage",
        "headings": [
          "Robust Cost-Sensitive Classification (RobustCS)",
          "Usage"
        ]
      },
      "doc_lineno": 76
    },
    {
      "source": "print(robust_cslogit.costs_)",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "guide/models/robustcs",
        "ref_id": "usage",
        "headings": [
          "Robust Cost-Sensitive Classification (RobustCS)",
          "Usage"
        ]
      },
      "doc_lineno": 89
    }
  ],
  "guide/models_guide": [],
  "guide/preprocessing/bias_mitigation": [
    {
      "source": "import numpy as np\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom empulse.samplers import BiasRelabler\n\nX, y = make_classification(random_state=42)\nhigh_clv = np.random.randint(0, 2, X.shape[0])\n\nrelabler = BiasRelabler(estimator=LogisticRegression())\nX_relabeled, y_relabeled = relabler.fit_resample(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasRelabler"
          ],
          "code_str": "BiasRelabler",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.samplers.bias_relabler.BiasRelabler"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasRelabler"
          ],
          "code_str": "BiasRelabler",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.samplers.bias_relabler.BiasRelabler"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasRelabler",
            "()"
          ],
          "code_str": "relabler",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.samplers.bias_relabler.BiasRelabler"
        }
      ],
      "example": {
        "document": "guide/preprocessing/bias_mitigation",
        "ref_id": "relabeling",
        "headings": [
          "Bias Mitigation",
          "Relabeling"
        ]
      },
      "doc_lineno": 52
    },
    {
      "source": "from imblearn.pipeline import Pipeline\nfrom sklearn import config_context\n\nwith config_context(enable_metadata_routing=True):\n    pipeline = Pipeline([\n        ('sampler', BiasRelabler(\n            LogisticRegression()\n        ).set_fit_resample_request(sensitive_feature=True)),\n        ('model', LogisticRegression())\n    ])\n\n    pipeline.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "imblearn",
            "pipeline"
          ],
          "code_str": "imblearn.pipeline",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "imblearn.pipeline"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()",
            "fit"
          ],
          "code_str": "pipeline.fit",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline.fit"
        }
      ],
      "example": {
        "document": "guide/preprocessing/bias_mitigation",
        "ref_id": "relabeling",
        "headings": [
          "Bias Mitigation",
          "Relabeling"
        ]
      },
      "doc_lineno": 68
    },
    {
      "source": "from empulse.models import BiasRelabelingClassifier\n\nmodel = BiasRelabelingClassifier(estimator=LogisticRegression())\nmodel.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier"
          ],
          "code_str": "BiasRelabelingClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier"
          ],
          "code_str": "BiasRelabelingClassifier",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        }
      ],
      "example": {
        "document": "guide/preprocessing/bias_mitigation",
        "ref_id": "relabeling",
        "headings": [
          "Bias Mitigation",
          "Relabeling"
        ]
      },
      "doc_lineno": 87
    },
    {
      "source": "clv = np.random.rand(X.shape[0]) * 100\n\nmodel = BiasRelabelingClassifier(\n    estimator=LogisticRegression(),\n    transform_feature=lambda clv: (clv > np.quantile(clv, 0.8)).astype(int)\n)\nmodel.fit(X, y, sensitive_feature=clv)",
      "names": [
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "int"
        }
      ],
      "example": {
        "document": "guide/preprocessing/bias_mitigation",
        "ref_id": "relabeling",
        "headings": [
          "Bias Mitigation",
          "Relabeling"
        ]
      },
      "doc_lineno": 102
    },
    {
      "source": "model = BiasRelabelingClassifier(\n    estimator=LogisticRegression(),\n    strategy=lambda y, sensitive_feature: (sensitive_feature == 1).sum() // 10\n)\nmodel.fit(X, y, sensitive_feature=high_clv)",
      "names": [],
      "example": {
        "document": "guide/preprocessing/bias_mitigation",
        "ref_id": "relabeling",
        "headings": [
          "Bias Mitigation",
          "Relabeling"
        ]
      },
      "doc_lineno": 118
    },
    {
      "source": "import numpy as np\nfrom sklearn.datasets import make_classification\nfrom empulse.samplers import BiasResampler\n\nX, y = make_classification(random_state=42)\nhigh_clv = np.random.randint(0, 2, X.shape[0])\n\nresampler = BiasResampler()\nX_resampled, y_resampled = resampler.fit_resample(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasResampler"
          ],
          "code_str": "BiasResampler",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.samplers.bias_resampler.BiasResampler"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasResampler"
          ],
          "code_str": "BiasResampler",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "empulse.samplers.bias_resampler.BiasResampler"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasResampler",
            "()"
          ],
          "code_str": "resampler",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "empulse.samplers.bias_resampler.BiasResampler"
        }
      ],
      "example": {
        "document": "guide/preprocessing/bias_mitigation",
        "ref_id": "resampling",
        "headings": [
          "Bias Mitigation",
          "Resampling"
        ]
      },
      "doc_lineno": 143
    },
    {
      "source": "from imblearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\n\nwith config_context(enable_metadata_routing=True):\n    pipeline = Pipeline([\n        ('sampler', BiasResampler().set_fit_resample_request(sensitive_feature=True)),\n        ('model', LogisticRegression())\n    ])\n\n    pipeline.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "imblearn",
            "pipeline"
          ],
          "code_str": "imblearn.pipeline",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "imblearn.pipeline"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()",
            "fit"
          ],
          "code_str": "pipeline.fit",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline.fit"
        }
      ],
      "example": {
        "document": "guide/preprocessing/bias_mitigation",
        "ref_id": "resampling",
        "headings": [
          "Bias Mitigation",
          "Resampling"
        ]
      },
      "doc_lineno": 158
    },
    {
      "source": "from empulse.models import BiasResamplingClassifier\n\nmodel = BiasResamplingClassifier(LogisticRegression())\nmodel.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier"
          ],
          "code_str": "BiasResamplingClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier"
          ],
          "code_str": "BiasResamplingClassifier",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        }
      ],
      "example": {
        "document": "guide/preprocessing/bias_mitigation",
        "ref_id": "resampling",
        "headings": [
          "Bias Mitigation",
          "Resampling"
        ]
      },
      "doc_lineno": 175
    },
    {
      "source": "clv = np.random.rand(X.shape[0]) * 100\n\nmodel = BiasResamplingClassifier(\n    estimator=LogisticRegression(),\n    transform_feature=lambda clv: (clv > np.quantile(clv, 0.8)).astype(int)\n)\nmodel.fit(X, y, sensitive_feature=clv)",
      "names": [
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "int"
        }
      ],
      "example": {
        "document": "guide/preprocessing/bias_mitigation",
        "ref_id": "resampling",
        "headings": [
          "Bias Mitigation",
          "Resampling"
        ]
      },
      "doc_lineno": 190
    },
    {
      "source": "model = BiasResamplingClassifier(\n    estimator=LogisticRegression(),\n    strategy=lambda y, sensitive_feature: np.array([[0.5, 1], [1, 2]])\n)\nmodel.fit(X, y, sensitive_feature=high_clv)",
      "names": [],
      "example": {
        "document": "guide/preprocessing/bias_mitigation",
        "ref_id": "resampling",
        "headings": [
          "Bias Mitigation",
          "Resampling"
        ]
      },
      "doc_lineno": 209
    },
    {
      "source": "import numpy as np\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom empulse.models import BiasReweighingClassifier\n\nX, y = make_classification(random_state=42)\nhigh_clv = np.random.randint(0, 2, X.shape[0])\n\nmodel = BiasReweighingClassifier(estimator=LogisticRegression())\nmodel.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier"
          ],
          "code_str": "BiasReweighingClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier"
          ],
          "code_str": "BiasReweighingClassifier",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        }
      ],
      "example": {
        "document": "guide/preprocessing/bias_mitigation",
        "ref_id": "reweighing",
        "headings": [
          "Bias Mitigation",
          "Reweighing"
        ]
      },
      "doc_lineno": 228
    },
    {
      "source": "clv = np.random.rand(X.shape[0]) * 100\n\nmodel = BiasReweighingClassifier(\n    estimator=LogisticRegression(),\n    transform_feature=lambda clv: (clv > np.quantile(clv, 0.8)).astype(int)\n)\nmodel.fit(X, y, sensitive_feature=clv)",
      "names": [
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "int"
        }
      ],
      "example": {
        "document": "guide/preprocessing/bias_mitigation",
        "ref_id": "reweighing",
        "headings": [
          "Bias Mitigation",
          "Reweighing"
        ]
      },
      "doc_lineno": 248
    },
    {
      "source": "def strategy(y_true, sensitive_feature):\n    sample_weights = np.ones(len(sensitive_feature))\n    sample_weights[np.where(sensitive_feature == 0)] = 0.5\n    return sample_weights\n\nmodel = BiasReweighingClassifier(\n    estimator=LogisticRegression(),\n    strategy=strategy\n)\nmodel.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "len"
        }
      ],
      "example": {
        "document": "guide/preprocessing/bias_mitigation",
        "ref_id": "reweighing",
        "headings": [
          "Bias Mitigation",
          "Reweighing"
        ]
      },
      "doc_lineno": 265
    }
  ],
  "guide/preprocessing/cost_sampling": [
    {
      "source": "from sklearn.datasets import make_classification\nfrom empulse.samplers import CostSensitiveSampler\n\nX, y = make_classification(random_state=42)\n\nsampler = CostSensitiveSampler(method='rejection sampling')\nX_resampled, y_resampled = sampler.fit_resample(X, y)",
      "names": [
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler",
            "()"
          ],
          "code_str": "sampler",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        }
      ],
      "example": {
        "document": "guide/preprocessing/cost_sampling",
        "ref_id": "rejection-sampling",
        "headings": [
          "Cost-Proportionate Sampling",
          "Rejection Sampling"
        ]
      },
      "doc_lineno": 23
    },
    {
      "source": "from sklearn.datasets import make_classification\nfrom empulse.samplers import CostSensitiveSampler\n\nX, y = make_classification(random_state=42)\n\nsampler = CostSensitiveSampler(method='oversampling', oversampling_norm=0.2)\nX_resampled, y_resampled = sampler.fit_resample(X, y)",
      "names": [
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler",
            "()"
          ],
          "code_str": "sampler",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        }
      ],
      "example": {
        "document": "guide/preprocessing/cost_sampling",
        "ref_id": "oversampling",
        "headings": [
          "Cost-Proportionate Sampling",
          "Oversampling"
        ]
      },
      "doc_lineno": 43
    },
    {
      "source": "from empulse.samplers import CostSensitiveSampler\n\nsampler = CostSensitiveSampler(method='rejection sampling', percentile_threshold=0.9)\nX_resampled, y_resampled = sampler.fit_resample(X, y)",
      "names": [
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler",
            "()"
          ],
          "code_str": "sampler",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        }
      ],
      "example": {
        "document": "guide/preprocessing/cost_sampling",
        "ref_id": "outlier-robustness",
        "headings": [
          "Cost-Proportionate Sampling",
          "Outlier Robustness"
        ]
      },
      "doc_lineno": 61
    },
    {
      "source": "from imblearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom empulse.samplers import CostSensitiveSampler\n\npipeline = Pipeline([\n    ('sampler', CostSensitiveSampler(method='rejection sampling')),\n    ('classifier', LogisticRegression())\n])\npipeline.fit(X, y)",
      "names": [
        {
          "import_components": [
            "imblearn",
            "pipeline"
          ],
          "code_str": "imblearn.pipeline",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "imblearn.pipeline"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()",
            "fit"
          ],
          "code_str": "pipeline.fit",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline.fit"
        }
      ],
      "example": {
        "document": "guide/preprocessing/cost_sampling",
        "ref_id": "using-the-cost-sensitive-sampler-in-a-pipeline",
        "headings": [
          "Cost-Proportionate Sampling",
          "Using the Cost-Sensitive Sampler in a Pipeline"
        ]
      },
      "doc_lineno": 75
    }
  ],
  "guide/preprocessing_guide": [],
  "index": [
    {
      "source": "from empulse.models import CSLogitClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nX, y = make_classification()\npipeline = Pipeline([\n    (\"scaler\", StandardScaler()),\n    (\"model\", CSLogitClassifier())\n])\npipeline.fit(X, y, model__fp_cost=10, model__fn_cost=1)\n",
      "names": [
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()",
            "fit"
          ],
          "code_str": "pipeline.fit",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline.fit"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "pipelines",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Ready to use out of the box with scikit-learn",
          "Pipelines"
        ]
      },
      "doc_lineno": 23
    },
    {
      "source": "from sklearn.model_selection import cross_val_score\n\ncross_val_score(\n    pipeline,\n    X,\n    y,\n    scoring=\"roc_auc\",\n    params={\"model__fp_cost\": 10, \"model__fn_cost\": 1}\n)\n",
      "names": [
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "cross-validation",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Ready to use out of the box with scikit-learn",
          "Cross-validation"
        ]
      },
      "doc_lineno": 38
    },
    {
      "source": "from sklearn.model_selection import GridSearchCV\n\nparam_grid = {\"model__C\": [0.1, 1, 10]}\ngrid_search = GridSearchCV(pipeline, param_grid, scoring=\"roc_auc\")\ngrid_search.fit(X, y, model__fp_cost=10, model__fn_cost=1)\n",
      "names": [
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "grid_search",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "grid-search",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Ready to use out of the box with scikit-learn",
          "Grid search"
        ]
      },
      "doc_lineno": 51
    },
    {
      "source": "from empulse.metrics import expected_cost_loss\nfrom sklearn.metrics import make_scorer\n\nscorer = make_scorer(\n    expected_cost_loss,\n    response_method=\"predict_proba\",\n    greater_is_better=False,\n    fp_cost=10,\n    fn_cost=1\n)\n\ncross_val_score(\n    pipeline,\n    X,\n    y,\n    scoring=scorer,\n    params={\"model__fp_cost\": 10, \"model__fn_cost\": 1}\n)\n",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_cost_loss"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.expected_cost_loss"
        },
        {
          "import_components": [
            "sklearn",
            "metrics"
          ],
          "code_str": "sklearn.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.metrics"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_cost_loss"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.expected_cost_loss"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "grid-search",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Ready to use out of the box with scikit-learn",
          "Grid search"
        ]
      },
      "doc_lineno": 62
    },
    {
      "source": "from empulse.metrics import CostMatrix\n\ncost_matrix = CostMatrix().add_fp_cost('fp').add_fn_cost('fn')\ncost_matrix.alias({'opportunity_cost': 'fp', 'time_wasted_cost': 'fn'})\n",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "build-your-own-profit-and-cost-metrics",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Build your own profit and cost metrics"
        ]
      },
      "doc_lineno": 113
    },
    {
      "source": "from empulse.metrics import Metric, Cost, Savings, MaxProfit\n\nexpected_cost_loss = Metric(cost_matrix=cost_matrix, strategy=Cost())\nexpected_savings_score = Metric(cost_matrix=cost_matrix, strategy=Savings())\nexpected_max_profit_score = Metric(cost_matrix=cost_matrix, strategy=MaxProfit())\n\nexpected_cost_loss(\n    y, pipeline.predict_proba(X)[:, 1], opportunity_cost=5, time_wasted_cost=1\n)\n",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Savings"
          ],
          "code_str": "Savings",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.savings_metric.Savings"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "MaxProfit"
          ],
          "code_str": "MaxProfit",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.metric_strategies.MaxProfit"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Savings"
          ],
          "code_str": "Savings",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.savings_metric.Savings"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "expected_savings_score",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "MaxProfit"
          ],
          "code_str": "MaxProfit",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric_strategies.MaxProfit"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "expected_max_profit_score",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "build-your-own-profit-and-cost-metrics",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Build your own profit and cost metrics"
        ]
      },
      "doc_lineno": 127
    },
    {
      "source": "from empulse.models import CSBoostClassifier\n\ncsboost = CSBoostClassifier(loss=expected_cost_loss)\ncsboost.fit(X, y, opportunity_cost=5, time_wasted_cost=1)\n",
      "names": [
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier"
          ],
          "code_str": "CSBoostClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier"
          ],
          "code_str": "CSBoostClassifier",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier",
            "()"
          ],
          "code_str": "csboost",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "build-your-own-profit-and-cost-metrics",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Build your own profit and cost metrics"
        ]
      },
      "doc_lineno": 141
    },
    {
      "source": "from empulse.models import CSTreeClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\ncstree = CSTreeClassifier(max_depth=2, min_samples_leaf=1, random_state=42)\ndtree = DecisionTreeClassifier(max_depth=2, min_samples_leaf=1, random_state=42)\n\ncstree.fit(X, y, fp_cost=10, fn_cost=1)\ndtree.fit(X, y)\n",
      "names": [
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSTreeClassifier"
          ],
          "code_str": "CSTreeClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cstree.CSTreeClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "tree"
          ],
          "code_str": "sklearn.tree",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.tree"
        },
        {
          "import_components": [
            "sklearn",
            "tree",
            "DecisionTreeClassifier"
          ],
          "code_str": "DecisionTreeClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.tree._classes.DecisionTreeClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSTreeClassifier"
          ],
          "code_str": "CSTreeClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cstree.CSTreeClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSTreeClassifier",
            "()"
          ],
          "code_str": "cstree",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cstree.CSTreeClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "tree",
            "DecisionTreeClassifier"
          ],
          "code_str": "DecisionTreeClassifier",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.tree._classes.DecisionTreeClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "tree",
            "DecisionTreeClassifier",
            "()"
          ],
          "code_str": "dtree",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.tree._classes.DecisionTreeClassifier"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "various-profit-driven-and-cost-sensitive-models",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Various profit-driven and cost-sensitive models"
        ]
      },
      "doc_lineno": 167
    },
    {
      "source": "import numpy as np\nfrom empulse.models import CSTreeClassifier\nfrom empulse.metrics import expected_cost_loss\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import make_scorer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification()\nfp_cost = np.random.rand(y.size)\nfn_cost = np.random.rand(y.size)\n\npipeline = Pipeline([\n    (\"scale\", StandardScaler()),\n    (\"model\", CSTreeClassifier().set_fit_request(fp_cost=True, fn_cost=True))\n])\n\nscorer = make_scorer(\n    expected_cost_loss,\n    response_method=\"predict_proba\",\n    greater_is_better=False,\n).set_score_request(fp_cost=True, fn_cost=True)\n\ncross_val_score(pipeline, X, y, scoring=scorer, params={\"fp_cost\": fp_cost, \"fn_cost\": fn_cost})\n",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSTreeClassifier"
          ],
          "code_str": "CSTreeClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cstree.CSTreeClassifier"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_cost_loss"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.metrics.expected_cost_loss"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "metrics"
          ],
          "code_str": "sklearn.metrics",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.metrics"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 9,
          "end_lineno": 9,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 9,
          "end_lineno": 9,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSTreeClassifier"
          ],
          "code_str": "CSTreeClassifier",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cstree.CSTreeClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_cost_loss"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "empulse.metrics.expected_cost_loss"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "easy-passing-of-instance-dependent-costs",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Easy passing of instance-dependent costs"
        ]
      },
      "doc_lineno": 186
    },
    {
      "source": "from empulse.samplers import CostSensitiveSampler\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification()\nsampler = CostSensitiveSampler()\nX_resampled, y_resampled = sampler.fit_resample(X, y, fp_cost=2, fn_cost=1)\n",
      "names": [
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler",
            "()"
          ],
          "code_str": "sampler",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "cost-aware-resampling-and-relabeling",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Cost-aware resampling and relabeling"
        ]
      },
      "doc_lineno": 225
    },
    {
      "source": "import numpy as np\nfrom empulse.samplers import CostSensitiveSampler\nfrom imblearn.pipeline import Pipeline\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification()\nfp_cost = np.random.rand(y.size)\nfn_cost = np.random.rand(y.size)\npipeline = Pipeline([\n    (\"scaler\", StandardScaler()),\n    (\"sampler\", CostSensitiveSampler().set_fit_resample_request(fp_cost=True, fn_cost=True)),\n    (\"model\", LogisticRegression())\n])\n\npipeline.fit(X, y, fp_cost=fp_cost, fn_cost=fn_cost)\n",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline"
          ],
          "code_str": "imblearn.pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "imblearn.pipeline"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()",
            "fit"
          ],
          "code_str": "pipeline.fit",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline.fit"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "cost-aware-resampling-and-relabeling",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Cost-aware resampling and relabeling"
        ]
      },
      "doc_lineno": 236
    },
    {
      "source": "from empulse.models import CSThresholdClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\n\nX, y = make_classification()\nmodel = CSThresholdClassifier(estimator=LogisticRegression())\nmodel.fit(X, y)\nmodel.predict(X, fp_cost=2, fn_cost=1)\n",
      "names": [
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSThresholdClassifier"
          ],
          "code_str": "CSThresholdClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cost_threshold.CSThresholdClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSThresholdClassifier"
          ],
          "code_str": "CSThresholdClassifier",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cost_threshold.CSThresholdClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSThresholdClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cost_threshold.CSThresholdClassifier"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "find-the-optimal-decision-threshold",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Find the optimal decision threshold"
        ]
      },
      "doc_lineno": 267
    },
    {
      "source": "from empulse.metrics import empc\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\n\nX, y = make_classification()\nmodel = LogisticRegression()\npredictions = model.fit(X, y).predict_proba(X)[:, 1]\n\nscore, threshold = empc(y, predictions, clv=50)\n",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empc"
          ],
          "code_str": "empc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empc"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression",
            "()"
          ],
          "code_str": "model",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empc"
          ],
          "code_str": "empc",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.metrics.empc"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "find-the-optimal-decision-threshold",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Find the optimal decision threshold"
        ]
      },
      "doc_lineno": 282
    },
    {
      "source": "from empulse.metrics import classification_threshold\n\ndecision_threshold = classification_threshold(y, predictions, customer_threshold=threshold)\n",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "classification_threshold"
          ],
          "code_str": "classification_threshold",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.classification_threshold"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "classification_threshold"
          ],
          "code_str": "classification_threshold",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "empulse.metrics.classification_threshold"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "find-the-optimal-decision-threshold",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Find the optimal decision threshold"
        ]
      },
      "doc_lineno": 298
    },
    {
      "source": "from sklearn.model_selection import FixedThresholdClassifier\n\nmodel = FixedThresholdClassifier(estimator=model, threshold=decision_threshold)\nmodel.predict(X)\n",
      "names": [
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "FixedThresholdClassifier"
          ],
          "code_str": "FixedThresholdClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._classification_threshold.FixedThresholdClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "FixedThresholdClassifier"
          ],
          "code_str": "FixedThresholdClassifier",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "sklearn.model_selection._classification_threshold.FixedThresholdClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "FixedThresholdClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "sklearn.model_selection._classification_threshold.FixedThresholdClassifier"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "find-the-optimal-decision-threshold",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Find the optimal decision threshold"
        ]
      },
      "doc_lineno": 308
    },
    {
      "source": "from empulse.datasets import load_give_me_some_credit\nfrom empulse.models import CSLogitClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nX, y, tp_cost, fp_cost, tn_cost, fn_cost = load_give_me_some_credit(return_X_y_costs=True)\n\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', CSLogitClassifier())\n])\npipeline.fit(\n    X,\n    y,\n    model__tp_cost=tp_cost,\n    model__fp_cost=fp_cost,\n    model__tn_cost=tn_cost,\n    model__fn_cost=fn_cost\n)\n",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_give_me_some_credit"
          ],
          "code_str": "load_give_me_some_credit",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_give_me_some_credit"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_give_me_some_credit"
          ],
          "code_str": "load_give_me_some_credit",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "empulse.datasets.load_give_me_some_credit"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()",
            "fit"
          ],
          "code_str": "pipeline.fit",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline.fit"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "easy-access-to-real-world-datasets-for-benchmarking",
        "headings": [
          "Empulse",
          "What can you do with Empulse?",
          "Take the tour",
          "Easy access to real-world datasets for benchmarking"
        ]
      },
      "doc_lineno": 321
    }
  ],
  "project/changelog": [],
  "project/contributing": [
    {
      "source": "$ git clone git@github.com:your_name_here/empulse.git\n$ cd empulse",
      "names": [],
      "example": {
        "document": "project/contributing",
        "ref_id": "implementing-changes",
        "headings": [
          "Contributing",
          "Implementing changes"
        ]
      },
      "doc_lineno": 47
    },
    {
      "source": "$ python -m venv env\n$ source env/bin/activate",
      "names": [],
      "example": {
        "document": "project/contributing",
        "ref_id": "implementing-changes",
        "headings": [
          "Contributing",
          "Implementing changes"
        ]
      },
      "doc_lineno": 52
    },
    {
      "source": "$ pip install uv",
      "names": [],
      "example": {
        "document": "project/contributing",
        "ref_id": "implementing-changes",
        "headings": [
          "Contributing",
          "Implementing changes"
        ]
      },
      "doc_lineno": 57
    },
    {
      "source": "$ uv sync",
      "names": [],
      "example": {
        "document": "project/contributing",
        "ref_id": "implementing-changes",
        "headings": [
          "Contributing",
          "Implementing changes"
        ]
      },
      "doc_lineno": 61
    },
    {
      "source": "$ pre-commit install --install-hooks",
      "names": [],
      "example": {
        "document": "project/contributing",
        "ref_id": "implementing-changes",
        "headings": [
          "Contributing",
          "Implementing changes"
        ]
      },
      "doc_lineno": 65
    },
    {
      "source": "$ git checkout main\n$ git branch fix_bug\n$ git checkout fix_bug",
      "names": [],
      "example": {
        "document": "project/contributing",
        "ref_id": "implementing-changes",
        "headings": [
          "Contributing",
          "Implementing changes"
        ]
      },
      "doc_lineno": 69
    },
    {
      "source": "$ uvx --with tox-uv tox -f tests",
      "names": [],
      "example": {
        "document": "project/contributing",
        "ref_id": "implementing-changes",
        "headings": [
          "Contributing",
          "Implementing changes"
        ]
      },
      "doc_lineno": 76
    },
    {
      "source": "$ git add .\n$ git commit -m 'Add succinct explanation of what changed'\n$ git push origin fix_bug",
      "names": [],
      "example": {
        "document": "project/contributing",
        "ref_id": "implementing-changes",
        "headings": [
          "Contributing",
          "Implementing changes"
        ]
      },
      "doc_lineno": 82
    }
  ],
  "project/license": [],
  "project_info": [],
  "reference/datasets": [],
  "reference/generated/empulse.datasets.Dataset": [],
  "reference/generated/empulse.datasets.load_churn_tv_subscriptions": [
    {
      "source": "from empulse.datasets import load_churn_tv_subscriptions\nfrom sklearn.model_selection import train_test_split\n\ndataset = load_churn_tv_subscriptions()\nX_train, X_test, y_train, y_test = train_test_split(\n    dataset.data, dataset.target, random_state=42\n)",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_churn_tv_subscriptions"
          ],
          "code_str": "load_churn_tv_subscriptions",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_churn_tv_subscriptions"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "train_test_split"
          ],
          "code_str": "train_test_split",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.train_test_split"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_churn_tv_subscriptions"
          ],
          "code_str": "load_churn_tv_subscriptions",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.datasets.load_churn_tv_subscriptions"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "train_test_split"
          ],
          "code_str": "train_test_split",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.model_selection.train_test_split"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.datasets.load_churn_tv_subscriptions",
        "ref_id": "load-churn-tv-subscriptions",
        "headings": [
          "load_churn_tv_subscriptions"
        ]
      },
      "doc_lineno": 77
    }
  ],
  "reference/generated/empulse.datasets.load_credit_scoring_pakdd": [
    {
      "source": "from empulse.datasets import load_credit_scoring_pakdd\nfrom sklearn.model_selection import train_test_split\n\ndataset = load_credit_scoring_pakdd()\nX_train, X_test, y_train, y_test = train_test_split(\n    dataset.data, dataset.target, random_state=42\n)",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_credit_scoring_pakdd"
          ],
          "code_str": "load_credit_scoring_pakdd",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_credit_scoring_pakdd"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "train_test_split"
          ],
          "code_str": "train_test_split",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.train_test_split"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_credit_scoring_pakdd"
          ],
          "code_str": "load_credit_scoring_pakdd",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.datasets.load_credit_scoring_pakdd"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "train_test_split"
          ],
          "code_str": "train_test_split",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.model_selection.train_test_split"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.datasets.load_credit_scoring_pakdd",
        "ref_id": "load-credit-scoring-pakdd",
        "headings": [
          "load_credit_scoring_pakdd"
        ]
      },
      "doc_lineno": 98
    }
  ],
  "reference/generated/empulse.datasets.load_give_me_some_credit": [
    {
      "source": "from empulse.datasets import load_give_me_some_credit\nfrom sklearn.model_selection import train_test_split\n\ndataset = load_give_me_some_credit()\nX_train, X_test, y_train, y_test = train_test_split(\n    dataset.data, dataset.target, random_state=42\n)",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_give_me_some_credit"
          ],
          "code_str": "load_give_me_some_credit",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_give_me_some_credit"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "train_test_split"
          ],
          "code_str": "train_test_split",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.train_test_split"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_give_me_some_credit"
          ],
          "code_str": "load_give_me_some_credit",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.datasets.load_give_me_some_credit"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "train_test_split"
          ],
          "code_str": "train_test_split",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.model_selection.train_test_split"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.datasets.load_give_me_some_credit",
        "ref_id": "load-give-me-some-credit",
        "headings": [
          "load_give_me_some_credit"
        ]
      },
      "doc_lineno": 97
    }
  ],
  "reference/generated/empulse.datasets.load_upsell_bank_telemarketing": [
    {
      "source": "from empulse.datasets import load_upsell_bank_telemarketing\nfrom sklearn.model_selection import train_test_split\n\ndataset = load_upsell_bank_telemarketing()\nX_train, X_test, y_train, y_test = train_test_split(\n    dataset.data, dataset.target, random_state=42\n)",
      "names": [
        {
          "import_components": [
            "empulse",
            "datasets"
          ],
          "code_str": "empulse.datasets",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.datasets"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_upsell_bank_telemarketing"
          ],
          "code_str": "load_upsell_bank_telemarketing",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.datasets.load_upsell_bank_telemarketing"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "train_test_split"
          ],
          "code_str": "train_test_split",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.train_test_split"
        },
        {
          "import_components": [
            "empulse",
            "datasets",
            "load_upsell_bank_telemarketing"
          ],
          "code_str": "load_upsell_bank_telemarketing",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.datasets.load_upsell_bank_telemarketing"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "train_test_split"
          ],
          "code_str": "train_test_split",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.model_selection.train_test_split"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.datasets.load_upsell_bank_telemarketing",
        "ref_id": "load-upsell-bank-telemarketing",
        "headings": [
          "load_upsell_bank_telemarketing"
        ]
      },
      "doc_lineno": 105
    }
  ],
  "reference/generated/empulse.metrics.Cost": [],
  "reference/generated/empulse.metrics.CostMatrix": [
    {
      "source": "import sympy as sp\nfrom empulse.metrics import CostMatrix\n\nclv, d, f, alpha, beta = sp.symbols(\n    'clv d f alpha beta'\n)  # define deterministic variables\ngamma = sp.stats.Beta('gamma', alpha, beta)  # define gamma to follow a Beta distribution\n\ncost_matrix = (\n    CostMatrix()\n    .add_tp_benefit(gamma * (clv - d - f))  # when churner accepts offer\n    .add_tp_benefit((1 - gamma) * -f)  # when churner does not accept offer\n    .add_fp_cost(d + f)  # when you send an offer to a non-churner\n    .alias({'incentive_cost': 'd', 'contact_cost': 'f'})\n)",
      "names": [
        {
          "import_components": [
            "sympy"
          ],
          "code_str": "sympy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sympy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        },
        {
          "import_components": [
            "sympy",
            "symbols"
          ],
          "code_str": "sp.symbols",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sympy.core.symbol.symbols"
        },
        {
          "import_components": [
            "sympy",
            "stats",
            "Beta"
          ],
          "code_str": "sp.stats.Beta",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "sympy.stats.Beta"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.CostMatrix",
        "ref_id": "costmatrix",
        "headings": [
          "CostMatrix"
        ]
      },
      "doc_lineno": 62
    },
    {
      "source": "import sympy as sp\nfrom empulse.metrics import Metric, Cost\n\nclv, delta, f, gamma = sp.symbols('clv delta f gamma')\ncost_matrix = (\n    CostMatrix()\n    .add_tp_benefit(gamma * (clv - delta * clv - f))  # when churner accepts offer\n    .add_tp_benefit((1 - gamma) * -f)  # when churner does not accept offer\n    .add_fp_cost(delta * clv + f)  # when you send an offer to a non-churner\n    .alias({'incentive_fraction': 'delta', 'contact_cost': 'f', 'accept_rate': 'gamma'})\n)\ncost_loss = Metric(cost_matrix, Cost())\n\ny_true = [1, 0, 1, 0, 1]\ny_proba = [0.9, 0.1, 0.8, 0.2, 0.7]\ncost_loss(\n    y_true, y_proba, clv=100, incentive_fraction=0.05, contact_cost=1, accept_rate=0.3\n)",
      "names": [
        {
          "import_components": [
            "sympy"
          ],
          "code_str": "sympy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sympy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "sympy",
            "symbols"
          ],
          "code_str": "sp.symbols",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sympy.core.symbol.symbols"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "cost_loss",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "cost_loss",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.CostMatrix",
        "ref_id": "costmatrix",
        "headings": [
          "CostMatrix"
        ]
      },
      "doc_lineno": 32
    },
    {
      "source": "import numpy as np\nimport sympy as sp\nfrom empulse.metrics import Metric, Cost\nfrom empulse.models import CSLogitClassifier, RobustCSClassifier\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification()\na, b = sp.symbols('a b')\ncost_matrix = CostMatrix().add_fp_cost(a).add_fn_cost(b).mark_outlier_sensitive(a)\ncost_loss = Metric(cost_matrix, Cost())\nfn_cost = np.random.rand(y.size)\n\nmodel = RobustCSClassifier(CSLogitClassifier(loss=cost_loss))\nmodel.fit(X, y, a=np.random.rand(y.size), b=5)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sympy"
          ],
          "code_str": "sympy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sympy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier"
          ],
          "code_str": "RobustCSClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sympy",
            "symbols"
          ],
          "code_str": "sp.symbols",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "sympy.core.symbol.symbols"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "cost_loss",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier"
          ],
          "code_str": "RobustCSClassifier",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "cost_loss",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.CostMatrix",
        "ref_id": "costmatrix",
        "headings": [
          "CostMatrix"
        ]
      },
      "doc_lineno": 32
    },
    {
      "source": "import sympy as sp\nfrom empulse.metrics import Metric, Cost\n\nclv, delta, f, gamma = sp.symbols('clv delta f gamma')\ncost_matrix = (\n    CostMatrix()\n    .add_tp_benefit(gamma * (clv - delta * clv - f))  # when churner accepts offer\n    .add_tp_benefit((1 - gamma) * -f)  # when churner does not accept offer\n    .add_fp_cost(delta * clv + f)  # when you send an offer to a non-churner\n    .alias({'incentive_fraction': 'delta', 'contact_cost': 'f', 'accept_rate': 'gamma'})\n    .set_default(incentive_fraction=0.05, contact_cost=1, accept_rate=0.3)\n)\ncost_loss = Metric(cost_matrix, Cost())\n\ny_true = [1, 0, 1, 0, 1]\ny_proba = [0.9, 0.1, 0.8, 0.2, 0.7]\ncost_loss(y_true, y_proba, clv=100, incentive_fraction=0.1)",
      "names": [
        {
          "import_components": [
            "sympy"
          ],
          "code_str": "sympy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sympy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "sympy",
            "symbols"
          ],
          "code_str": "sp.symbols",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sympy.core.symbol.symbols"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "cost_loss",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "cost_loss",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.CostMatrix",
        "ref_id": "costmatrix",
        "headings": [
          "CostMatrix"
        ]
      },
      "doc_lineno": 29
    }
  ],
  "reference/generated/empulse.metrics.MaxProfit": [],
  "reference/generated/empulse.metrics.Metric": [
    {
      "source": "import sympy as sp\nfrom empulse.metrics import Metric, MaxProfit, CostMatrix\n\nclv, d, f, alpha, beta = sp.symbols(\n    'clv d f alpha beta'\n)  # define deterministic variables\ngamma = sp.stats.Beta('gamma', alpha, beta)  # define gamma to follow a Beta distribution\n\ncost_matrix = (\n    CostMatrix()\n    .add_tp_benefit(gamma * (clv - d - f))  # when churner accepts offer\n    .add_tp_benefit((1 - gamma) * -f)  # when churner does not accept offer\n    .add_fp_cost(d + f)  # when you send an offer to a non-churner\n    .alias({'incentive_cost': 'd', 'contact_cost': 'f'})\n)\nempc_score = Metric(cost_matrix, MaxProfit())\n\ny_true = [1, 0, 1, 0, 1]\ny_proba = [0.9, 0.1, 0.8, 0.2, 0.7]\n\nempc_score(y_true, y_proba, clv=100, incentive_cost=10, contact_cost=1, alpha=6, beta=14)",
      "names": [
        {
          "import_components": [
            "sympy"
          ],
          "code_str": "sympy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sympy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "MaxProfit"
          ],
          "code_str": "MaxProfit",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.metric_strategies.MaxProfit"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        },
        {
          "import_components": [
            "sympy",
            "symbols"
          ],
          "code_str": "sp.symbols",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sympy.core.symbol.symbols"
        },
        {
          "import_components": [
            "sympy",
            "stats",
            "Beta"
          ],
          "code_str": "sp.stats.Beta",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "sympy.stats.Beta"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "MaxProfit"
          ],
          "code_str": "MaxProfit",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric_strategies.MaxProfit"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "empc_score",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "empc_score",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.Metric",
        "ref_id": "metric",
        "headings": [
          "Metric"
        ]
      },
      "doc_lineno": 84
    },
    {
      "source": "import sympy as sp\nfrom empulse.metrics import Metric, Cost, CostMatrix\n\nclv, delta, f, gamma = sp.symbols('clv delta f gamma')\n\ncost_matrix = (\n    CostMatrix()\n    .add_tp_benefit(gamma * (clv - delta * clv - f))  # when churner accepts offer\n    .add_tp_benefit((1 - gamma) * -f)  # when churner does not accept offer\n    .add_fp_cost(delta * clv + f)  # when you send an offer to a non-churner\n    .alias({'incentive_fraction': 'delta', 'contact_cost': 'f', 'accept_rate': 'gamma'})\n)\ncost_loss = Metric(cost_matrix, Cost())\n\ny_true = [1, 0, 1, 0, 1]\ny_proba = [0.9, 0.1, 0.8, 0.2, 0.7]\n\ncost_loss(\n    y_true, y_proba, clv=100, incentive_fraction=0.05, contact_cost=1, accept_rate=0.3\n)",
      "names": [
        {
          "import_components": [
            "sympy"
          ],
          "code_str": "sympy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "sympy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        },
        {
          "import_components": [
            "sympy",
            "symbols"
          ],
          "code_str": "sp.symbols",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "sympy.core.symbol.symbols"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "cost_loss",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "cost_loss",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.Metric",
        "ref_id": "metric",
        "headings": [
          "Metric"
        ]
      },
      "doc_lineno": 110
    }
  ],
  "reference/generated/empulse.metrics.MetricStrategy": [],
  "reference/generated/empulse.metrics.Savings": [],
  "reference/generated/empulse.metrics.auepc_score": [],
  "reference/generated/empulse.metrics.classification_threshold": [
    {
      "source": ">>> from empulse.metrics import classification_threshold\n>>> from empulse.metrics import empc\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>> score, threshold = empc(y_true, y_score)\n>>> classification_threshold(y_true, y_score, threshold)\n0.2",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "classification_threshold"
          ],
          "code_str": "classification_threshold",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.classification_threshold"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empc"
          ],
          "code_str": "empc",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empc"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empc"
          ],
          "code_str": "empc",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.empc"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "classification_threshold"
          ],
          "code_str": "classification_threshold",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "empulse.metrics.classification_threshold"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.classification_threshold",
        "ref_id": "classification-threshold",
        "headings": [
          "classification_threshold"
        ]
      },
      "doc_lineno": 40
    }
  ],
  "reference/generated/empulse.metrics.cost_loss": [
    {
      "source": ">>> import numpy as np\n>>> from empulse.metrics import cost_loss\n>>> y_pred = [0, 1, 0, 0]\n>>> y_true = [0, 1, 1, 0]\n>>> fp_cost = np.array([4, 1, 2, 2])\n>>> fn_cost = np.array([1, 3, 3, 1])\n>>> cost_loss(y_true, y_pred, fp_cost=fp_cost, fn_cost=fn_cost)\n3.0",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "cost_loss"
          ],
          "code_str": "cost_loss",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.cost_loss"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "cost_loss"
          ],
          "code_str": "cost_loss",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "empulse.metrics.cost_loss"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.cost_loss",
        "ref_id": "cost-loss",
        "headings": [
          "cost_loss"
        ]
      },
      "doc_lineno": 117
    }
  ],
  "reference/generated/empulse.metrics.empa": [
    {
      "source": ">>> from empulse.metrics import empa\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>> empa(y_true, y_score, direct_selling=1)\n(3706.2500000052773, 0.8749999997947746)",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empa"
          ],
          "code_str": "empa",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empa"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empa"
          ],
          "code_str": "empa",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.empa"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.empa",
        "ref_id": "empa",
        "headings": [
          "empa"
        ]
      },
      "doc_lineno": 89
    },
    {
      "source": ">>> from empulse.metrics import empa\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>> empa(y_true, y_score, direct_selling=0)\n(3556.25, 0.875)",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empa"
          ],
          "code_str": "empa",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empa"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empa"
          ],
          "code_str": "empa",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.empa"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.empa",
        "ref_id": "empa",
        "headings": [
          "empa"
        ]
      },
      "doc_lineno": 98
    }
  ],
  "reference/generated/empulse.metrics.empa_score": [
    {
      "source": ">>> from empulse.metrics import empa_score\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>> empa_score(y_true, y_score, direct_selling=1)\n3706.2500000052773",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empa_score"
          ],
          "code_str": "empa_score",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empa_score"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empa_score"
          ],
          "code_str": "empa_score",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.empa_score"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.empa_score",
        "ref_id": "empa-score",
        "headings": [
          "empa_score"
        ]
      },
      "doc_lineno": 87
    },
    {
      "source": ">>> import numpy as np\n>>> from sklearn.datasets import make_classification\n>>> from sklearn.linear_model import LogisticRegression\n>>> from sklearn.model_selection import cross_val_score, StratifiedKFold\n>>> from sklearn.metrics import make_scorer\n>>> from empulse.metrics import empa_score\n>>>\n>>> X, y = make_classification(random_state=42)\n>>> model = LogisticRegression()\n>>> cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n>>> scorer = make_scorer(\n...     empa_score,\n...     response_method='predict_proba',\n...     alpha=10,\n...     beta=0.001,\n...     sales_cost=2_000,\n...     contact_cost=100,\n...     direct_selling=0,\n... )\n>>> np.mean(cross_val_score(model, X, y, cv=cv, scoring=scorer))\n4449.0",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold"
          ],
          "code_str": "StratifiedKFold",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "metrics"
          ],
          "code_str": "sklearn.metrics",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.metrics"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empa_score"
          ],
          "code_str": "empa_score",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empa_score"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold"
          ],
          "code_str": "StratifiedKFold",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold",
            "()"
          ],
          "code_str": "cv",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empa_score"
          ],
          "code_str": "empa_score",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "empulse.metrics.empa_score"
        },
        {
          "import_components": [
            "numpy",
            "mean"
          ],
          "code_str": "np.mean",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.mean"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression",
            "()"
          ],
          "code_str": "model",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold",
            "()"
          ],
          "code_str": "cv",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.empa_score",
        "ref_id": "empa-score",
        "headings": [
          "empa_score"
        ]
      },
      "doc_lineno": 111
    }
  ],
  "reference/generated/empulse.metrics.empb": [],
  "reference/generated/empulse.metrics.empb_score": [],
  "reference/generated/empulse.metrics.empc": [
    {
      "source": ">>> from empulse.metrics import empc\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>> empc(y_true, y_score)\n(23.875593418348124, 0.8743700763487141)",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empc"
          ],
          "code_str": "empc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empc"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empc"
          ],
          "code_str": "empc",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.empc"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.empc",
        "ref_id": "empc",
        "headings": [
          "empc"
        ]
      },
      "doc_lineno": 108
    }
  ],
  "reference/generated/empulse.metrics.empc_score": [
    {
      "source": ">>> from empulse.metrics import empc_score\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>> empc_score(y_true, y_score)\n23.875593418348124",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empc_score"
          ],
          "code_str": "empc_score",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empc_score"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empc_score"
          ],
          "code_str": "empc_score",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.empc_score"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.empc_score",
        "ref_id": "empc-score",
        "headings": [
          "empc_score"
        ]
      },
      "doc_lineno": 106
    },
    {
      "source": ">>> import numpy as np\n>>> from sklearn.datasets import make_classification\n>>> from sklearn.linear_model import LogisticRegression\n>>> from sklearn.model_selection import cross_val_score, StratifiedKFold\n>>> from sklearn.metrics import make_scorer\n>>> from empulse.metrics import empa_score\n>>>\n>>> X, y = make_classification(random_state=42)\n>>> model = LogisticRegression()\n>>> cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n>>> scorer = make_scorer(\n...     empc_score,\n...     response_method='predict_proba',\n...     clv=300,\n...     incentive_cost=15,\n... )\n>>> np.mean(cross_val_score(model, X, y, cv=cv, scoring=scorer))\n42.09000050753503",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold"
          ],
          "code_str": "StratifiedKFold",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "metrics"
          ],
          "code_str": "sklearn.metrics",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.metrics"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empa_score"
          ],
          "code_str": "empa_score",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empa_score"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold"
          ],
          "code_str": "StratifiedKFold",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold",
            "()"
          ],
          "code_str": "cv",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "numpy",
            "mean"
          ],
          "code_str": "np.mean",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.mean"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression",
            "()"
          ],
          "code_str": "model",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold",
            "()"
          ],
          "code_str": "cv",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.empc_score",
        "ref_id": "empc-score",
        "headings": [
          "empc_score"
        ]
      },
      "doc_lineno": 127
    }
  ],
  "reference/generated/empulse.metrics.empcs": [
    {
      "source": ">>> from empulse.metrics import empcs\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>> empcs(y_true, y_score)\n(0.09747017050000001, 0.32434500000000005)",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empcs"
          ],
          "code_str": "empcs",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empcs"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empcs"
          ],
          "code_str": "empcs",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.empcs"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.empcs",
        "ref_id": "empcs",
        "headings": [
          "empcs"
        ]
      },
      "doc_lineno": 82
    }
  ],
  "reference/generated/empulse.metrics.empcs_score": [
    {
      "source": ">>> from empulse.metrics import empcs_score\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>> empcs_score(y_true, y_score)\n0.09747017050000001",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empcs_score"
          ],
          "code_str": "empcs_score",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empcs_score"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empcs_score"
          ],
          "code_str": "empcs_score",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.empcs_score"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.empcs_score",
        "ref_id": "empcs-score",
        "headings": [
          "empcs_score"
        ]
      },
      "doc_lineno": 83
    },
    {
      "source": ">>> import numpy as np\n>>> from sklearn.datasets import make_classification\n>>> from sklearn.linear_model import LogisticRegression\n>>> from sklearn.model_selection import cross_val_score, StratifiedKFold\n>>> from sklearn.metrics import make_scorer\n>>> from empulse.metrics import empcs_score\n>>>\n>>> X, y = make_classification(random_state=42)\n>>> model = LogisticRegression()\n>>> cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n>>> scorer = make_scorer(\n...     empcs_score,\n...     response_method='predict_proba',\n...     roi=0.2,\n...     success_rate=0.5,\n...     default_rate=0.1,\n... )\n>>> np.mean(cross_val_score(model, X, y, cv=cv, scoring=scorer))\n0.14904",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold"
          ],
          "code_str": "StratifiedKFold",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "metrics"
          ],
          "code_str": "sklearn.metrics",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.metrics"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empcs_score"
          ],
          "code_str": "empcs_score",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empcs_score"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold"
          ],
          "code_str": "StratifiedKFold",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold",
            "()"
          ],
          "code_str": "cv",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empcs_score"
          ],
          "code_str": "empcs_score",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "empulse.metrics.empcs_score"
        },
        {
          "import_components": [
            "numpy",
            "mean"
          ],
          "code_str": "np.mean",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.mean"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression",
            "()"
          ],
          "code_str": "model",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold",
            "()"
          ],
          "code_str": "cv",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.empcs_score",
        "ref_id": "empcs-score",
        "headings": [
          "empcs_score"
        ]
      },
      "doc_lineno": 105
    }
  ],
  "reference/generated/empulse.metrics.expected_cost_loss": [
    {
      "source": ">>> import numpy as np\n>>> from empulse.metrics import expected_cost_loss\n>>> y_proba = [0.2, 0.9, 0.1, 0.2]\n>>> y_true = [0, 1, 1, 0]\n>>> fp_cost = np.array([4, 1, 2, 2])\n>>> fn_cost = np.array([1, 3, 3, 1])\n>>> expected_cost_loss(y_true, y_proba, fp_cost=fp_cost, fn_cost=fn_cost)\n4.2",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_cost_loss"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.expected_cost_loss"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_cost_loss"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "empulse.metrics.expected_cost_loss"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.expected_cost_loss",
        "ref_id": "expected-cost-loss",
        "headings": [
          "expected_cost_loss"
        ]
      },
      "doc_lineno": 110
    }
  ],
  "reference/generated/empulse.metrics.expected_cost_loss_acquisition": [],
  "reference/generated/empulse.metrics.expected_cost_loss_churn": [],
  "reference/generated/empulse.metrics.expected_log_cost_loss": [
    {
      "source": "import numpy as np\nfrom empulse.metrics import expected_log_cost_loss\ny_proba = [0.1, 0.9, 0.8, 0.2]\ny_true = [0, 1, 1, 0]\nfp_cost = np.array([4, 1, 2, 2])\nfn_cost = np.array([1, 3, 3, 1])\nexpected_log_cost_loss(y_true, y_proba, fp_cost=fp_cost, fn_cost=fn_cost)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_log_cost_loss"
          ],
          "code_str": "expected_log_cost_loss",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.expected_log_cost_loss"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_log_cost_loss"
          ],
          "code_str": "expected_log_cost_loss",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "empulse.metrics.expected_log_cost_loss"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.expected_log_cost_loss",
        "ref_id": "expected-log-cost-loss",
        "headings": [
          "expected_log_cost_loss"
        ]
      },
      "doc_lineno": 83
    }
  ],
  "reference/generated/empulse.metrics.expected_savings_score": [
    {
      "source": "import numpy as np\nfrom empulse.metrics import expected_savings_score\ny_pred = [0.4, 0.8, 0.75, 0.1]\ny_true = [0, 1, 1, 0]\nfp_cost = np.array([4, 1, 2, 2])\nfn_cost = np.array([1, 3, 3, 1])\nexpected_savings_score(y_true, y_pred, fp_cost=fp_cost, fn_cost=fn_cost)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_savings_score"
          ],
          "code_str": "expected_savings_score",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.expected_savings_score"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_savings_score"
          ],
          "code_str": "expected_savings_score",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "empulse.metrics.expected_savings_score"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.expected_savings_score",
        "ref_id": "expected-savings-score",
        "headings": [
          "expected_savings_score"
        ]
      },
      "doc_lineno": 108
    }
  ],
  "reference/generated/empulse.metrics.lift_score": [],
  "reference/generated/empulse.metrics.make_objective_acquisition": [
    {
      "source": "from xgboost import XGBClassifier\nfrom empulse.metrics import make_objective_acquisition\n\nobjective = make_objective_acquisition(model='xgboost')\nclf = XGBClassifier(objective=objective, n_estimators=100, max_depth=3)",
      "names": [
        {
          "import_components": [
            "xgboost",
            "XGBClassifier"
          ],
          "code_str": "XGBClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "make_objective_acquisition"
          ],
          "code_str": "make_objective_acquisition",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.make_objective_acquisition"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "make_objective_acquisition"
          ],
          "code_str": "make_objective_acquisition",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.metrics.make_objective_acquisition"
        },
        {
          "import_components": [
            "xgboost",
            "XGBClassifier"
          ],
          "code_str": "XGBClassifier",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        },
        {
          "import_components": [
            "xgboost",
            "XGBClassifier",
            "()"
          ],
          "code_str": "clf",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.make_objective_acquisition",
        "ref_id": "make-objective-acquisition",
        "headings": [
          "make_objective_acquisition"
        ]
      },
      "doc_lineno": 68
    }
  ],
  "reference/generated/empulse.metrics.make_objective_aec": [
    {
      "source": "from xgboost import XGBClassifier\nfrom empulse.metrics import make_objective_aec\n\nobjective = make_objective_aec('xgboost', fp_cost=1, fn_cost=1)\nclf = XGBClassifier(objective=objective, n_estimators=100, max_depth=3)",
      "names": [
        {
          "import_components": [
            "xgboost",
            "XGBClassifier"
          ],
          "code_str": "XGBClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "make_objective_aec"
          ],
          "code_str": "make_objective_aec",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.make_objective_aec"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "make_objective_aec"
          ],
          "code_str": "make_objective_aec",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.metrics.make_objective_aec"
        },
        {
          "import_components": [
            "xgboost",
            "XGBClassifier"
          ],
          "code_str": "XGBClassifier",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        },
        {
          "import_components": [
            "xgboost",
            "XGBClassifier",
            "()"
          ],
          "code_str": "clf",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.make_objective_aec",
        "ref_id": "make-objective-aec",
        "headings": [
          "make_objective_aec"
        ]
      },
      "doc_lineno": 65
    }
  ],
  "reference/generated/empulse.metrics.make_objective_churn": [
    {
      "source": "from xgboost import XGBClassifier\nfrom empulse.metrics import make_objective_churn\n\nobjective = make_objective_churn(model='xgboost')\nclf = XGBClassifier(objective=objective, n_estimators=100, max_depth=3)",
      "names": [
        {
          "import_components": [
            "xgboost",
            "XGBClassifier"
          ],
          "code_str": "XGBClassifier",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "make_objective_churn"
          ],
          "code_str": "make_objective_churn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.make_objective_churn"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "make_objective_churn"
          ],
          "code_str": "make_objective_churn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "empulse.metrics.make_objective_churn"
        },
        {
          "import_components": [
            "xgboost",
            "XGBClassifier"
          ],
          "code_str": "XGBClassifier",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        },
        {
          "import_components": [
            "xgboost",
            "XGBClassifier",
            "()"
          ],
          "code_str": "clf",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.make_objective_churn",
        "ref_id": "make-objective-churn",
        "headings": [
          "make_objective_churn"
        ]
      },
      "doc_lineno": 73
    }
  ],
  "reference/generated/empulse.metrics.max_profit": [
    {
      "source": ">>> from empulse.metrics import max_profit\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>>\n>>> clv = 200\n>>> d = 10\n>>> f = 1\n>>> gamma = 0.3\n>>> tp_benefit = clv * (gamma * (1 - (d / clv)) - (f / clv))\n>>> fp_cost = d + f\n>>>\n>>> max_profit(y_true, y_score, tp_benefit=tp_benefit, fp_cost=fp_cost)\n(23.87..., 0.875)",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "max_profit"
          ],
          "code_str": "max_profit",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.max_profit"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "max_profit"
          ],
          "code_str": "max_profit",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "empulse.metrics.max_profit"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.max_profit",
        "ref_id": "max-profit",
        "headings": [
          "max_profit"
        ]
      },
      "doc_lineno": 88
    }
  ],
  "reference/generated/empulse.metrics.max_profit_score": [
    {
      "source": ">>> from empulse.metrics import max_profit_score\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>>\n>>> clv = 200\n>>> d = 10\n>>> f = 1\n>>> gamma = 0.3\n>>> tp_benefit = clv * (gamma * (1 - (d / clv) - (f / clv)))\n>>> fp_cost = d + f\n>>>\n>>> max_profit_score(y_true, y_score, tp_benefit=tp_benefit, fp_cost=fp_cost)\n24.22...",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "max_profit_score"
          ],
          "code_str": "max_profit_score",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.max_profit_score"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "max_profit_score"
          ],
          "code_str": "max_profit_score",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "empulse.metrics.max_profit_score"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.max_profit_score",
        "ref_id": "max-profit-score",
        "headings": [
          "max_profit_score"
        ]
      },
      "doc_lineno": 85
    }
  ],
  "reference/generated/empulse.metrics.mpa": [
    {
      "source": ">>> from empulse.metrics import mpa\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>> mpa(y_true, y_score)\n(3706.25, 0.875)",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpa"
          ],
          "code_str": "mpa",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.mpa"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpa"
          ],
          "code_str": "mpa",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.mpa"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.mpa",
        "ref_id": "mpa",
        "headings": [
          "mpa"
        ]
      },
      "doc_lineno": 74
    }
  ],
  "reference/generated/empulse.metrics.mpa_score": [
    {
      "source": ">>> from empulse.metrics import mpa_score\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>> mpa_score(y_true, y_score, direct_selling=1)\n3706.25",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpa_score"
          ],
          "code_str": "mpa_score",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.mpa_score"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpa_score"
          ],
          "code_str": "mpa_score",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.mpa_score"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.mpa_score",
        "ref_id": "mpa-score",
        "headings": [
          "mpa_score"
        ]
      },
      "doc_lineno": 74
    },
    {
      "source": ">>> import numpy as np\n>>> from sklearn.datasets import make_classification\n>>> from sklearn.linear_model import LogisticRegression\n>>> from sklearn.model_selection import cross_val_score, StratifiedKFold\n>>> from sklearn.metrics import make_scorer\n>>> from empulse.metrics import mpa_score\n>>>\n>>> X, y = make_classification(random_state=42)\n>>> model = LogisticRegression()\n>>> cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n>>> scorer = make_scorer(\n...     mpa_score,\n...     response_method='predict_proba',\n...     contribution=7_000,\n...     sales_cost=2_000,\n...     contact_cost=100,\n...     direct_selling=0,\n... )\n>>> np.mean(cross_val_score(model, X, y, cv=cv, scoring=scorer))\n3099.0",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold"
          ],
          "code_str": "StratifiedKFold",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "metrics"
          ],
          "code_str": "sklearn.metrics",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.metrics"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpa_score"
          ],
          "code_str": "mpa_score",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "empulse.metrics.mpa_score"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold"
          ],
          "code_str": "StratifiedKFold",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold",
            "()"
          ],
          "code_str": "cv",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpa_score"
          ],
          "code_str": "mpa_score",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "empulse.metrics.mpa_score"
        },
        {
          "import_components": [
            "numpy",
            "mean"
          ],
          "code_str": "np.mean",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.mean"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression",
            "()"
          ],
          "code_str": "model",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold",
            "()"
          ],
          "code_str": "cv",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.mpa_score",
        "ref_id": "mpa-score",
        "headings": [
          "mpa_score"
        ]
      },
      "doc_lineno": 97
    }
  ],
  "reference/generated/empulse.metrics.mpc": [
    {
      "source": ">>> from empulse.metrics import mpc\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>> mpc(y_true, y_score)\n(23.874999999999996, 0.875)",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpc"
          ],
          "code_str": "mpc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.mpc"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpc"
          ],
          "code_str": "mpc",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.mpc"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.mpc",
        "ref_id": "mpc",
        "headings": [
          "mpc"
        ]
      },
      "doc_lineno": 97
    }
  ],
  "reference/generated/empulse.metrics.mpc_score": [
    {
      "source": ">>> from empulse.metrics import mpc_score\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>> mpc_score(y_true, y_score)\n23.874999999999996",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpc_score"
          ],
          "code_str": "mpc_score",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.mpc_score"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpc_score"
          ],
          "code_str": "mpc_score",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.mpc_score"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.mpc_score",
        "ref_id": "mpc-score",
        "headings": [
          "mpc_score"
        ]
      },
      "doc_lineno": 95
    },
    {
      "source": ">>> import numpy as np\n>>> from sklearn.datasets import make_classification\n>>> from sklearn.linear_model import LogisticRegression\n>>> from sklearn.model_selection import cross_val_score, StratifiedKFold\n>>> from sklearn.metrics import make_scorer\n>>> from empulse.metrics import mpa_score\n>>>\n>>> X, y = make_classification(random_state=42)\n>>> model = LogisticRegression()\n>>> cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n>>> scorer = make_scorer(\n...     mpc_score,\n...     response_method='predict_proba',\n...     clv=300,\n...     incentive_cost=15,\n... )\n>>> np.mean(cross_val_score(model, X, y, cv=cv, scoring=scorer))\n42.08999999999999",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold"
          ],
          "code_str": "StratifiedKFold",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "metrics"
          ],
          "code_str": "sklearn.metrics",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.metrics"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpa_score"
          ],
          "code_str": "mpa_score",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "empulse.metrics.mpa_score"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold"
          ],
          "code_str": "StratifiedKFold",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold",
            "()"
          ],
          "code_str": "cv",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "numpy",
            "mean"
          ],
          "code_str": "np.mean",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.mean"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression",
            "()"
          ],
          "code_str": "model",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold",
            "()"
          ],
          "code_str": "cv",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.mpc_score",
        "ref_id": "mpc-score",
        "headings": [
          "mpc_score"
        ]
      },
      "doc_lineno": 116
    }
  ],
  "reference/generated/empulse.metrics.mpcs": [
    {
      "source": ">>> from empulse.metrics import mpcs\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>> mpcs(y_true, y_score)\n(0.038349999999999995, 0.875)",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpcs"
          ],
          "code_str": "mpcs",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.mpcs"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpcs"
          ],
          "code_str": "mpcs",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.mpcs"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.mpcs",
        "ref_id": "mpcs",
        "headings": [
          "mpcs"
        ]
      },
      "doc_lineno": 76
    }
  ],
  "reference/generated/empulse.metrics.mpcs_score": [
    {
      "source": ">>> from empulse.metrics import mpcs_score\n>>>\n>>> y_true = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> y_score = [0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.8, 0.9]\n>>> mpcs_score(y_true, y_score)\n0.038349999999999995",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpcs_score"
          ],
          "code_str": "mpcs_score",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.mpcs_score"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpcs_score"
          ],
          "code_str": "mpcs_score",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "empulse.metrics.mpcs_score"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.mpcs_score",
        "ref_id": "mpcs-score",
        "headings": [
          "mpcs_score"
        ]
      },
      "doc_lineno": 74
    },
    {
      "source": ">>> import numpy as np\n>>> from sklearn.datasets import make_classification\n>>> from sklearn.linear_model import LogisticRegression\n>>> from sklearn.model_selection import cross_val_score, StratifiedKFold\n>>> from sklearn.metrics import make_scorer\n>>> from empulse.metrics import mpcs_score\n>>>\n>>> X, y = make_classification(random_state=42)\n>>> model = LogisticRegression()\n>>> cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n>>> scorer = make_scorer(\n...     mpcs_score, response_method='predict_proba', roi=0.2, loan_lost_rate=0.25\n... )\n>>> np.mean(cross_val_score(model, X, y, cv=cv, scoring=scorer))\n0.123",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold"
          ],
          "code_str": "StratifiedKFold",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "metrics"
          ],
          "code_str": "sklearn.metrics",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.metrics"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpcs_score"
          ],
          "code_str": "mpcs_score",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "empulse.metrics.mpcs_score"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold"
          ],
          "code_str": "StratifiedKFold",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold",
            "()"
          ],
          "code_str": "cv",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpcs_score"
          ],
          "code_str": "mpcs_score",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "empulse.metrics.mpcs_score"
        },
        {
          "import_components": [
            "numpy",
            "mean"
          ],
          "code_str": "np.mean",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.mean"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression",
            "()"
          ],
          "code_str": "model",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "StratifiedKFold",
            "()"
          ],
          "code_str": "cv",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "sklearn.model_selection._split.StratifiedKFold"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.mpcs_score",
        "ref_id": "mpcs-score",
        "headings": [
          "mpcs_score"
        ]
      },
      "doc_lineno": 92
    }
  ],
  "reference/generated/empulse.metrics.savings_score": [
    {
      "source": "import numpy as np\nfrom empulse.metrics import savings_score\ny_pred = [0, 1, 0, 0]\ny_true = [0, 1, 1, 0]\nfp_cost = np.array([4, 1, 2, 2])\nfn_cost = np.array([1, 3, 3, 1])\nsavings_score(y_true, y_pred, fp_cost=fp_cost, fn_cost=fn_cost)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "savings_score"
          ],
          "code_str": "savings_score",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.savings_score"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "savings_score"
          ],
          "code_str": "savings_score",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "empulse.metrics.savings_score"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.metrics.savings_score",
        "ref_id": "savings-score",
        "headings": [
          "savings_score"
        ]
      },
      "doc_lineno": 120
    }
  ],
  "reference/generated/empulse.models.B2BoostClassifier": [
    {
      "source": "import numpy as np\nfrom empulse.models import B2BoostClassifier\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification()\nclv = np.random.rand(y.size) * 100\n\nmodel = B2BoostClassifier()\nmodel.fit(X, y, clv=clv, incentive_fraction=0.1)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "B2BoostClassifier"
          ],
          "code_str": "B2BoostClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.b2boost.B2BoostClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "B2BoostClassifier"
          ],
          "code_str": "B2BoostClassifier",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.b2boost.B2BoostClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "B2BoostClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.b2boost.B2BoostClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.B2BoostClassifier",
        "ref_id": "b2boostclassifier",
        "headings": [
          "B2BoostClassifier"
        ]
      },
      "doc_lineno": 81
    },
    {
      "source": "import numpy as np\nfrom empulse.models import B2BoostClassifier\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification(n_samples=50)\nclv = np.random.rand(y.size) * 100\n\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', B2BoostClassifier(contact_cost=10).set_fit_request(clv=True))\n])\n\ncross_val_score(pipeline, X, y, params={'clv': clv})",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "B2BoostClassifier"
          ],
          "code_str": "B2BoostClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.b2boost.B2BoostClassifier"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "B2BoostClassifier"
          ],
          "code_str": "B2BoostClassifier",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.b2boost.B2BoostClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.B2BoostClassifier",
        "ref_id": "b2boostclassifier",
        "headings": [
          "B2BoostClassifier"
        ]
      },
      "doc_lineno": 93
    },
    {
      "source": "import numpy as np\nfrom empulse.metrics import empb_score\nfrom empulse.models import B2BoostClassifier\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import make_scorer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBClassifier\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification()\nclv = np.random.rand(y.size) * 100\ncontact_cost = 10\n\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', B2BoostClassifier(\n        XGBClassifier(n_jobs=2, n_estimators=10),\n        contact_cost=contact_cost\n    ).set_fit_request(clv=True))\n])\nparam_grid = {\n    'model__estimator__learning_rate': np.logspace(-5, 0, 5),\n}\nscorer = make_scorer(\n    empb_score,\n    response_method='predict_proba',\n    contact_cost=contact_cost\n)\nscorer = scorer.set_score_request(clv=True)\n\ngrid_search = GridSearchCV(pipeline, param_grid=param_grid, scoring=scorer)\ngrid_search.fit(X, y, clv=clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empb_score"
          ],
          "code_str": "empb_score",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.empb_score"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "B2BoostClassifier"
          ],
          "code_str": "B2BoostClassifier",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.b2boost.B2BoostClassifier"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "metrics"
          ],
          "code_str": "sklearn.metrics",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.metrics"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 9,
          "end_lineno": 9,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 9,
          "end_lineno": 9,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "xgboost",
            "XGBClassifier"
          ],
          "code_str": "XGBClassifier",
          "lineno": 10,
          "end_lineno": 10,
          "context": "import_target",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "B2BoostClassifier"
          ],
          "code_str": "B2BoostClassifier",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.b2boost.B2BoostClassifier"
        },
        {
          "import_components": [
            "xgboost",
            "XGBClassifier"
          ],
          "code_str": "XGBClassifier",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "numpy",
            "logspace"
          ],
          "code_str": "np.logspace",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.logspace"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "empb_score"
          ],
          "code_str": "empb_score",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "empulse.metrics.empb_score"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "grid_search",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.B2BoostClassifier",
        "ref_id": "b2boostclassifier",
        "headings": [
          "B2BoostClassifier"
        ]
      },
      "doc_lineno": 115
    }
  ],
  "reference/generated/empulse.models.BiasRelabelingClassifier": [
    {
      "source": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_classification\nfrom empulse.models import BiasRelabelingClassifier\n\nX, y = make_classification()\nhigh_clv = np.random.randint(0, 2, size=X.shape[0])\n\nmodel = BiasRelabelingClassifier(estimator=LogisticRegression())\nmodel.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier"
          ],
          "code_str": "BiasRelabelingClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier"
          ],
          "code_str": "BiasRelabelingClassifier",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasRelabelingClassifier",
        "ref_id": "biasrelabelingclassifier",
        "headings": [
          "BiasRelabelingClassifier"
        ]
      },
      "doc_lineno": 54
    },
    {
      "source": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_classification\nfrom empulse.models import BiasRelabelingClassifier\n\nX, y = make_classification()\nclv = np.random.rand(X.shape[0]) * 100\n\nmodel = BiasRelabelingClassifier(\n    estimator=LogisticRegression(),\n    transform_feature=lambda clv: (clv > np.quantile(clv, 0.8)).astype(int)\n)\nmodel.fit(X, y, sensitive_feature=clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier"
          ],
          "code_str": "BiasRelabelingClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier"
          ],
          "code_str": "BiasRelabelingClassifier",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "numpy",
            "quantile"
          ],
          "code_str": "np.quantile",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.quantile"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasRelabelingClassifier",
        "ref_id": "biasrelabelingclassifier",
        "headings": [
          "BiasRelabelingClassifier"
        ]
      },
      "doc_lineno": 69
    },
    {
      "source": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_classification\nfrom empulse.models import BiasRelabelingClassifier\n\nX, y = make_classification()\nhigh_clv = np.random.randint(0, 2, size=X.shape[0])\n\n# Simple strategy to swap 2 labels\ndef strategy(y_true, sensitive_feature):\n    return 2\n\nmodel = BiasRelabelingClassifier(\n    estimator=LogisticRegression(),\n    strategy=strategy\n)\nmodel.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier"
          ],
          "code_str": "BiasRelabelingClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier"
          ],
          "code_str": "BiasRelabelingClassifier",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasRelabelingClassifier",
        "ref_id": "biasrelabelingclassifier",
        "headings": [
          "BiasRelabelingClassifier"
        ]
      },
      "doc_lineno": 87
    },
    {
      "source": "import numpy as np\nfrom sklearn import config_context\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom empulse.models import BiasRelabelingClassifier\n\nwith config_context(enable_metadata_routing=True):\n    X, y = make_classification()\n    high_clv = np.random.randint(0, 2, size=X.shape[0])\n\n    param_grid = {'model__estimator__C': [0.1, 1, 10]}\n    pipeline = Pipeline([\n        ('scaler', StandardScaler()),\n        ('model', BiasRelabelingClassifier(LogisticRegression()).set_fit_request(sensitive_feature=True))\n    ])\n    search = GridSearchCV(pipeline, param_grid)\n    search.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier"
          ],
          "code_str": "BiasRelabelingClassifier",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier"
          ],
          "code_str": "BiasRelabelingClassifier",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "search",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasRelabelingClassifier",
        "ref_id": "biasrelabelingclassifier",
        "headings": [
          "BiasRelabelingClassifier"
        ]
      },
      "doc_lineno": 109
    },
    {
      "source": "import numpy as np\nfrom sklearn import config_context\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom empulse.models import BiasRelabelingClassifier\n\nwith config_context(enable_metadata_routing=True):\n    X, y = make_classification()\n    high_clv = np.random.randint(0, 2, size=X.shape[0])\n\n    param_grid = {'model__estimator__C': [0.1, 1, 10]}\n    pipeline = Pipeline([\n        ('scaler', StandardScaler()),\n        ('model', BiasRelabelingClassifier(LogisticRegression()).set_fit_request(sensitive_feature=True))\n    ])\n    search = GridSearchCV(pipeline, param_grid)\n    search.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier"
          ],
          "code_str": "BiasRelabelingClassifier",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasRelabelingClassifier"
          ],
          "code_str": "BiasRelabelingClassifier",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_relabeling.BiasRelabelingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "search",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasRelabelingClassifier",
        "ref_id": "biasrelabelingclassifier",
        "headings": [
          "BiasRelabelingClassifier"
        ]
      },
      "doc_lineno": 134
    }
  ],
  "reference/generated/empulse.models.BiasResamplingClassifier": [
    {
      "source": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_classification\nfrom empulse.models import BiasResamplingClassifier\n\nX, y = make_classification()\nhigh_clv = np.random.randint(0, 2, size=X.shape[0])\n\nmodel = BiasResamplingClassifier(estimator=LogisticRegression())\nmodel.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier"
          ],
          "code_str": "BiasResamplingClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier"
          ],
          "code_str": "BiasResamplingClassifier",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasResamplingClassifier",
        "ref_id": "biasresamplingclassifier",
        "headings": [
          "BiasResamplingClassifier"
        ]
      },
      "doc_lineno": 57
    },
    {
      "source": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_classification\nfrom empulse.models import BiasResamplingClassifier\n\nX, y = make_classification()\nclv = np.random.rand(X.shape[0]) * 100\n\nmodel = BiasResamplingClassifier(\n    estimator=LogisticRegression(),\n    transform_feature=lambda clv: (clv > np.quantile(clv, 0.8)).astype(int)\n)\nmodel.fit(X, y, sensitive_feature=clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier"
          ],
          "code_str": "BiasResamplingClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier"
          ],
          "code_str": "BiasResamplingClassifier",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "numpy",
            "quantile"
          ],
          "code_str": "np.quantile",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.quantile"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasResamplingClassifier",
        "ref_id": "biasresamplingclassifier",
        "headings": [
          "BiasResamplingClassifier"
        ]
      },
      "doc_lineno": 72
    },
    {
      "source": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_classification\nfrom empulse.models import BiasResamplingClassifier\n\nX, y = make_classification()\nhigh_clv = np.random.randint(0, 2, size=X.shape[0])\n\n# Simple strategy to double the weight for the sensitive feature\ndef strategy(y_true, sensitive_feature):\n    return np.array([\n        [1, 2],\n        [1, 2]\n    ])\n\nmodel = BiasResamplingClassifier(\n    estimator=LogisticRegression(),\n    strategy=strategy\n)\nmodel.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier"
          ],
          "code_str": "BiasResamplingClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier"
          ],
          "code_str": "BiasResamplingClassifier",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasResamplingClassifier",
        "ref_id": "biasresamplingclassifier",
        "headings": [
          "BiasResamplingClassifier"
        ]
      },
      "doc_lineno": 90
    },
    {
      "source": "import numpy as np\nfrom sklearn import config_context\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom empulse.models import BiasResamplingClassifier\n\nwith config_context(enable_metadata_routing=True):\n    X, y = make_classification()\n    high_clv = np.random.randint(0, 2, size=X.shape[0])\n\n    param_grid = {'model__estimator__C': [0.1, 1, 10]}\n    pipeline = Pipeline([\n        ('scaler', StandardScaler()),\n        ('model', BiasResamplingClassifier(LogisticRegression()).set_fit_request(sensitive_feature=True))\n    ])\n    search = GridSearchCV(pipeline, param_grid)\n    search.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier"
          ],
          "code_str": "BiasResamplingClassifier",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier"
          ],
          "code_str": "BiasResamplingClassifier",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "search",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasResamplingClassifier",
        "ref_id": "biasresamplingclassifier",
        "headings": [
          "BiasResamplingClassifier"
        ]
      },
      "doc_lineno": 115
    },
    {
      "source": "import numpy as np\nfrom sklearn import config_context\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom empulse.models import BiasResamplingClassifier\n\nwith config_context(enable_metadata_routing=True):\n    X, y = make_classification()\n    high_clv = np.random.randint(0, 2, size=X.shape[0])\n\n    param_grid = {'model__estimator__C': [0.1, 1, 10]}\n    pipeline = Pipeline([\n        ('scaler', StandardScaler()),\n        ('model', BiasResamplingClassifier(LogisticRegression()).set_fit_request(sensitive_feature=True))\n    ])\n    search = GridSearchCV(pipeline, param_grid)\n    search.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier"
          ],
          "code_str": "BiasResamplingClassifier",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasResamplingClassifier"
          ],
          "code_str": "BiasResamplingClassifier",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_resampling.BiasResamplingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "search",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasResamplingClassifier",
        "ref_id": "biasresamplingclassifier",
        "headings": [
          "BiasResamplingClassifier"
        ]
      },
      "doc_lineno": 140
    }
  ],
  "reference/generated/empulse.models.BiasReweighingClassifier": [
    {
      "source": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_classification\nfrom empulse.models import BiasReweighingClassifier\n\nX, y = make_classification()\nhigh_clv = np.random.randint(0, 2, size=X.shape[0])\n\nmodel = BiasReweighingClassifier(estimator=LogisticRegression())\nmodel.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier"
          ],
          "code_str": "BiasReweighingClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier"
          ],
          "code_str": "BiasReweighingClassifier",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasReweighingClassifier",
        "ref_id": "biasreweighingclassifier",
        "headings": [
          "BiasReweighingClassifier"
        ]
      },
      "doc_lineno": 47
    },
    {
      "source": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_classification\nfrom empulse.models import BiasReweighingClassifier\n\nX, y = make_classification()\nclv = np.random.rand(X.shape[0]) * 100\n\nmodel = BiasReweighingClassifier(\n    estimator=LogisticRegression(),\n    transform_feature=lambda clv: (clv > np.quantile(clv, 0.8)).astype(int)\n)\nmodel.fit(X, y, sensitive_feature=clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier"
          ],
          "code_str": "BiasReweighingClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier"
          ],
          "code_str": "BiasReweighingClassifier",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "numpy",
            "quantile"
          ],
          "code_str": "np.quantile",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.quantile"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasReweighingClassifier",
        "ref_id": "biasreweighingclassifier",
        "headings": [
          "BiasReweighingClassifier"
        ]
      },
      "doc_lineno": 62
    },
    {
      "source": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_classification\nfrom empulse.models import BiasReweighingClassifier\n\nX, y = make_classification()\nhigh_clv = np.random.randint(0, 2, size=X.shape[0])\n\n# Simple strategy to double the weight for the sensitive feature\ndef strategy(y_true, sensitive_feature):\n    sample_weights = np.ones(len(sensitive_feature))\n    sample_weights[np.where(sensitive_feature == 0)] = 0.5\n    return sample_weights\n\nmodel = BiasReweighingClassifier(\n    estimator=LogisticRegression(),\n    strategy=strategy\n)\nmodel.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier"
          ],
          "code_str": "BiasReweighingClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "numpy",
            "ones"
          ],
          "code_str": "np.ones",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.ones"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "where"
          ],
          "code_str": "np.where",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.where"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier"
          ],
          "code_str": "BiasReweighingClassifier",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasReweighingClassifier",
        "ref_id": "biasreweighingclassifier",
        "headings": [
          "BiasReweighingClassifier"
        ]
      },
      "doc_lineno": 80
    },
    {
      "source": "import numpy as np\nfrom sklearn import config_context\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom empulse.models import BiasReweighingClassifier\n\nwith config_context(enable_metadata_routing=True):\n    X, y = make_classification()\n    high_clv = np.random.randint(0, 2, size=X.shape[0])\n\n    param_grid = {'model__estimator__C': [0.1, 1, 10]}\n    pipeline = Pipeline([\n        ('scaler', StandardScaler()),\n        ('model', BiasReweighingClassifier(LogisticRegression()).set_fit_request(sensitive_feature=True))\n    ])\n    search = GridSearchCV(pipeline, param_grid)\n    search.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier"
          ],
          "code_str": "BiasReweighingClassifier",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier"
          ],
          "code_str": "BiasReweighingClassifier",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "search",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasReweighingClassifier",
        "ref_id": "biasreweighingclassifier",
        "headings": [
          "BiasReweighingClassifier"
        ]
      },
      "doc_lineno": 104
    },
    {
      "source": "import numpy as np\nfrom sklearn import config_context\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom empulse.models import BiasReweighingClassifier\n\nwith config_context(enable_metadata_routing=True):\n    X, y = make_classification()\n    high_clv = np.random.randint(0, 2, size=X.shape[0])\n\n    param_grid = {'model__estimator__C': [0.1, 1, 10]}\n    pipeline = Pipeline([\n        ('scaler', StandardScaler()),\n        ('model', BiasReweighingClassifier(LogisticRegression()).set_fit_request(sensitive_feature=True))\n    ])\n    search = GridSearchCV(pipeline, param_grid)\n    search.fit(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier"
          ],
          "code_str": "BiasReweighingClassifier",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "config_context"
          ],
          "code_str": "config_context",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "sklearn.config_context"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "BiasReweighingClassifier"
          ],
          "code_str": "BiasReweighingClassifier",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "empulse.models.bias_mitigation.bias_reweighing.BiasReweighingClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "search",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.BiasReweighingClassifier",
        "ref_id": "biasreweighingclassifier",
        "headings": [
          "BiasReweighingClassifier"
        ]
      },
      "doc_lineno": 129
    }
  ],
  "reference/generated/empulse.models.CSBaggingClassifier": [],
  "reference/generated/empulse.models.CSBoostClassifier": [
    {
      "source": "import numpy as np\nfrom empulse.models import CSBoostClassifier\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification()\nfn_cost = np.random.rand(y.size)  # instance-dependent cost\nfp_cost = 5  # constant cost\n\nmodel = CSBoostClassifier()\nmodel.fit(X, y, fn_cost=fn_cost, fp_cost=fp_cost)\ny_proba = model.predict_proba(X)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier"
          ],
          "code_str": "CSBoostClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier"
          ],
          "code_str": "CSBoostClassifier",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.CSBoostClassifier",
        "ref_id": "csboostclassifier",
        "headings": [
          "CSBoostClassifier"
        ]
      },
      "doc_lineno": 92
    },
    {
      "source": "import numpy as np\nfrom empulse.models import CSBoostClassifier\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification()\nfn_cost = np.random.rand(y.size)\nfp_cost = 5\n\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', CSBoostClassifier().set_fit_request(fn_cost=True, fp_cost=True))\n])\n\ncross_val_score(pipeline, X, y, params={'fn_cost': fn_cost, 'fp_cost': fp_cost})",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier"
          ],
          "code_str": "CSBoostClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier"
          ],
          "code_str": "CSBoostClassifier",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.CSBoostClassifier",
        "ref_id": "csboostclassifier",
        "headings": [
          "CSBoostClassifier"
        ]
      },
      "doc_lineno": 108
    },
    {
      "source": "import numpy as np\nfrom empulse.metrics import expected_cost_loss\nfrom empulse.models import CSBoostClassifier\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import make_scorer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBClassifier\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification(n_samples=50)\nfn_cost = np.random.rand(y.size)\nfp_cost = 5\n\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', CSBoostClassifier(\n        XGBClassifier(n_jobs=2, n_estimators=10)\n    ).set_fit_request(fn_cost=True, fp_cost=True))\n])\nparam_grid = {\n    'model__estimator__learning_rate': np.logspace(-5, 0, 5),\n}\nscorer = make_scorer(\n    expected_cost_loss,\n    response_method='predict_proba',\n    greater_is_better=False,\n    normalize=True\n)\nscorer = scorer.set_score_request(fn_cost=True, fp_cost=True)\n\ngrid_search = GridSearchCV(pipeline, param_grid=param_grid, scoring=scorer)\ngrid_search.fit(X, y, fn_cost=fn_cost, fp_cost=fp_cost)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_cost_loss"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.expected_cost_loss"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier"
          ],
          "code_str": "CSBoostClassifier",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "metrics"
          ],
          "code_str": "sklearn.metrics",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.metrics"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 9,
          "end_lineno": 9,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 9,
          "end_lineno": 9,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "xgboost",
            "XGBClassifier"
          ],
          "code_str": "XGBClassifier",
          "lineno": 10,
          "end_lineno": 10,
          "context": "import_target",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier"
          ],
          "code_str": "CSBoostClassifier",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        },
        {
          "import_components": [
            "xgboost",
            "XGBClassifier"
          ],
          "code_str": "XGBClassifier",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "xgboost.sklearn.XGBClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "numpy",
            "logspace"
          ],
          "code_str": "np.logspace",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "numpy.logspace"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_cost_loss"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "empulse.metrics.expected_cost_loss"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "grid_search",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.CSBoostClassifier",
        "ref_id": "csboostclassifier",
        "headings": [
          "CSBoostClassifier"
        ]
      },
      "doc_lineno": 133
    }
  ],
  "reference/generated/empulse.models.CSForestClassifier": [
    {
      "source": "N_t / N * (impurity - N_t_R / N_t * right_impurity\n                    - N_t_L / N_t * left_impurity)",
      "names": [],
      "example": {
        "document": "reference/generated/empulse.models.CSForestClassifier",
        "ref_id": "csforestclassifier",
        "headings": [
          "CSForestClassifier"
        ]
      },
      "doc_lineno": 131
    }
  ],
  "reference/generated/empulse.models.CSLogitClassifier": [
    {
      "source": "import numpy as np\nfrom empulse.models import CSLogitClassifier\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification()\nfn_cost = np.random.rand(y.size)  # instance-dependent cost\nfp_cost = 5  # constant cost\n\nmodel = CSLogitClassifier(C=0.1)\nmodel.fit(X, y, fn_cost=fn_cost, fp_cost=fp_cost)\ny_proba = model.predict_proba(X)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.CSLogitClassifier",
        "ref_id": "cslogitclassifier",
        "headings": [
          "CSLogitClassifier"
        ]
      },
      "doc_lineno": 135
    },
    {
      "source": "import numpy as np\nfrom empulse.models import CSLogitClassifier\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification()\nfn_cost = np.random.rand(y.size)\nfp_cost = 5\n\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', CSLogitClassifier(C=0.1).set_fit_request(fn_cost=True, fp_cost=True)),\n])\n\ncross_val_score(pipeline, X, y, params={'fn_cost': fn_cost, 'fp_cost': fp_cost})",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.CSLogitClassifier",
        "ref_id": "cslogitclassifier",
        "headings": [
          "CSLogitClassifier"
        ]
      },
      "doc_lineno": 151
    },
    {
      "source": "import numpy as np\nfrom empulse.metrics import expected_cost_loss\nfrom empulse.models import CSLogitClassifier\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import make_scorer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification(n_samples=50)\nfn_cost = np.random.rand(y.size)\nfp_cost = 5\n\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', CSLogitClassifier().set_fit_request(fn_cost=True, fp_cost=True)),\n])\nparam_grid = {'model__C': np.logspace(-5, 2, 5)}\nscorer = make_scorer(\n    expected_cost_loss,\n    response_method='predict_proba',\n    greater_is_better=False,\n    normalize=True,\n)\nscorer = scorer.set_score_request(fn_cost=True, fp_cost=True)\n\ngrid_search = GridSearchCV(pipeline, param_grid=param_grid, scoring=scorer)\ngrid_search.fit(X, y, fn_cost=fn_cost, fp_cost=fp_cost)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_cost_loss"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.expected_cost_loss"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "metrics"
          ],
          "code_str": "sklearn.metrics",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.metrics"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 9,
          "end_lineno": 9,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 9,
          "end_lineno": 9,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "numpy",
            "logspace"
          ],
          "code_str": "np.logspace",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "numpy.logspace"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_cost_loss"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "empulse.metrics.expected_cost_loss"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "grid_search",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.CSLogitClassifier",
        "ref_id": "cslogitclassifier",
        "headings": [
          "CSLogitClassifier"
        ]
      },
      "doc_lineno": 176
    }
  ],
  "reference/generated/empulse.models.CSThresholdClassifier": [],
  "reference/generated/empulse.models.CSTreeClassifier": [
    {
      "source": "N_t / N * (impurity - N_t_R / N_t * right_impurity - N_t_L / N_t * left_impurity)",
      "names": [],
      "example": {
        "document": "reference/generated/empulse.models.CSTreeClassifier",
        "ref_id": "cstreeclassifier",
        "headings": [
          "CSTreeClassifier"
        ]
      },
      "doc_lineno": 132
    }
  ],
  "reference/generated/empulse.models.ProfLogitClassifier": [
    {
      "source": "from empulse.metrics import mpc_score\nfrom empulse.models import ProfLogitClassifier\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification()\n\nmodel = ProfLogitClassifier(loss=mpc_score, C=0.1, l1_ratio=0.5)\nmodel.fit(X, y, clv=200, incentive_cost=10)",
      "names": [
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpc_score"
          ],
          "code_str": "mpc_score",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "empulse.metrics.mpc_score"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "ProfLogitClassifier"
          ],
          "code_str": "ProfLogitClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.proflogit.ProfLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "ProfLogitClassifier"
          ],
          "code_str": "ProfLogitClassifier",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "empulse.models.proflogit.ProfLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "mpc_score"
          ],
          "code_str": "mpc_score",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "empulse.metrics.mpc_score"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "ProfLogitClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "empulse.models.proflogit.ProfLogitClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.ProfLogitClassifier",
        "ref_id": "proflogitclassifier",
        "headings": [
          "ProfLogitClassifier"
        ]
      },
      "doc_lineno": 105
    }
  ],
  "reference/generated/empulse.models.RobustCSClassifier": [
    {
      "source": "import numpy as np\nfrom empulse.models import CSLogitClassifier, RobustCSClassifier\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification()\nfn_cost = np.random.rand(y.size)  # instance-dependent cost\nfp_cost = 5  # constant cost\n\nmodel = RobustCSClassifier(CSLogitClassifier(C=0.1))\nmodel.fit(X, y, fn_cost=fn_cost, fp_cost=fp_cost)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier"
          ],
          "code_str": "RobustCSClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier"
          ],
          "code_str": "RobustCSClassifier",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.RobustCSClassifier",
        "ref_id": "robustcsclassifier",
        "headings": [
          "RobustCSClassifier"
        ]
      },
      "doc_lineno": 125
    },
    {
      "source": "import numpy as np\nimport sympy as sp\nfrom empulse.metrics import Metric, Cost, CostMatrix\nfrom empulse.models import CSLogitClassifier, RobustCSClassifier\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification()\na, b = sp.symbols('a b')\ncost_loss = Metric(\n    CostMatrix().add_fp_cost(a).add_fn_cost(b).mark_outlier_sensitive(a), Cost()\n)\nfn_cost = np.random.rand(y.size)\n\nmodel = RobustCSClassifier(CSLogitClassifier(loss=cost_loss))\nmodel.fit(X, y, a=np.random.rand(y.size), b=5)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "sympy"
          ],
          "code_str": "sympy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "sympy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier"
          ],
          "code_str": "RobustCSClassifier",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sympy",
            "symbols"
          ],
          "code_str": "sp.symbols",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "sympy.core.symbol.symbols"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric"
          ],
          "code_str": "Metric",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "CostMatrix"
          ],
          "code_str": "CostMatrix",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_matrix.CostMatrix"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Cost"
          ],
          "code_str": "Cost",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.cost_metric.Cost"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "cost_loss",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier"
          ],
          "code_str": "RobustCSClassifier",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "Metric",
            "()"
          ],
          "code_str": "cost_loss",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "empulse.metrics.metric.metric.Metric"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier",
            "()"
          ],
          "code_str": "model",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.RobustCSClassifier",
        "ref_id": "robustcsclassifier",
        "headings": [
          "RobustCSClassifier"
        ]
      },
      "doc_lineno": 140
    },
    {
      "source": "import numpy as np\nfrom empulse.models import CSBoostClassifier, RobustCSClassifier\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification()\nfn_cost = np.random.rand(y.size)\nfp_cost = 5\n\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    (\n        'model',\n        RobustCSClassifier(CSBoostClassifier()).set_fit_request(\n            fn_cost=True, fp_cost=True\n        ),\n    ),\n])\n\ncross_val_score(pipeline, X, y, params={'fn_cost': fn_cost, 'fp_cost': fp_cost})",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier"
          ],
          "code_str": "CSBoostClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier"
          ],
          "code_str": "RobustCSClassifier",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier"
          ],
          "code_str": "RobustCSClassifier",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSBoostClassifier"
          ],
          "code_str": "CSBoostClassifier",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.csboost.CSBoostClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.RobustCSClassifier",
        "ref_id": "robustcsclassifier",
        "headings": [
          "RobustCSClassifier"
        ]
      },
      "doc_lineno": 160
    },
    {
      "source": "import numpy as np\nfrom empulse.metrics import expected_cost_loss\nfrom empulse.models import CSLogitClassifier, RobustCSClassifier\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import make_scorer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification(n_samples=50)\nfn_cost = np.random.rand(y.size)\nfp_cost = 5\n\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    (\n        'model',\n        RobustCSClassifier(CSLogitClassifier()).set_fit_request(\n            fn_cost=True, fp_cost=True\n        ),\n    ),\n])\nparam_grid = {'model__estimator__C': np.logspace(-5, 2, 5)}\nscorer = make_scorer(\n    expected_cost_loss,\n    response_method='predict_proba',\n    greater_is_better=False,\n    normalize=True,\n)\nscorer = scorer.set_score_request(fn_cost=True, fp_cost=True)\n\ngrid_search = GridSearchCV(pipeline, param_grid=param_grid, scoring=scorer)\ngrid_search.fit(X, y, fn_cost=fn_cost, fp_cost=fp_cost)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "metrics"
          ],
          "code_str": "empulse.metrics",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.metrics"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_cost_loss"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.metrics.expected_cost_loss"
        },
        {
          "import_components": [
            "empulse",
            "models"
          ],
          "code_str": "empulse.models",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "empulse.models"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier"
          ],
          "code_str": "RobustCSClassifier",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "metrics"
          ],
          "code_str": "sklearn.metrics",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.metrics"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline"
          ],
          "code_str": "sklearn.pipeline",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "sklearn.pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing"
          ],
          "code_str": "sklearn.preprocessing",
          "lineno": 9,
          "end_lineno": 9,
          "context": "import_from",
          "resolved_location": "sklearn.preprocessing"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 9,
          "end_lineno": 9,
          "context": "import_target",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "preprocessing",
            "StandardScaler"
          ],
          "code_str": "StandardScaler",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "sklearn.preprocessing._data.StandardScaler"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "RobustCSClassifier"
          ],
          "code_str": "RobustCSClassifier",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.robust_cs.RobustCSClassifier"
        },
        {
          "import_components": [
            "empulse",
            "models",
            "CSLogitClassifier"
          ],
          "code_str": "CSLogitClassifier",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "empulse.models.cost_sensitive.cslogit.CSLogitClassifier"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "numpy",
            "logspace"
          ],
          "code_str": "np.logspace",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.logspace"
        },
        {
          "import_components": [
            "sklearn",
            "metrics",
            "make_scorer"
          ],
          "code_str": "make_scorer",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "sklearn.metrics.make_scorer"
        },
        {
          "import_components": [
            "empulse",
            "metrics",
            "expected_cost_loss"
          ],
          "code_str": "expected_cost_loss",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "empulse.metrics.expected_cost_loss"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "sklearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "grid_search",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.models.RobustCSClassifier",
        "ref_id": "robustcsclassifier",
        "headings": [
          "RobustCSClassifier"
        ]
      },
      "doc_lineno": 190
    }
  ],
  "reference/generated/empulse.optimizers.Generation": [],
  "reference/generated/empulse.samplers.BiasRelabler": [
    {
      "source": "import numpy as np\nfrom empulse.samplers import BiasRelabler\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\n\nX, y = make_classification()\nhigh_clv = np.random.randint(0, 2, y.shape)\n\nsampler = BiasRelabler(LogisticRegression())\nsampler.fit_resample(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasRelabler"
          ],
          "code_str": "BiasRelabler",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.samplers.bias_relabler.BiasRelabler"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasRelabler"
          ],
          "code_str": "BiasRelabler",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.samplers.bias_relabler.BiasRelabler"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasRelabler",
            "()"
          ],
          "code_str": "sampler",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.samplers.bias_relabler.BiasRelabler"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.samplers.BiasRelabler",
        "ref_id": "biasrelabler",
        "headings": [
          "BiasRelabler"
        ]
      },
      "doc_lineno": 52
    },
    {
      "source": "import numpy as np\nfrom empulse.samplers import BiasRelabler\nfrom imblearn.pipeline import Pipeline\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification()\nhigh_clv = np.random.randint(0, 2, y.shape)\n\npipeline = Pipeline([\n    ('sampler', BiasRelabler(\n        LogisticRegression()\n    ).set_fit_resample_request(sensitive_feature=True)),\n    ('model', LogisticRegression())\n])\n\ncross_val_score(pipeline, X, y, params={'sensitive_feature': high_clv})",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasRelabler"
          ],
          "code_str": "BiasRelabler",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.samplers.bias_relabler.BiasRelabler"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline"
          ],
          "code_str": "imblearn.pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "imblearn.pipeline"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasRelabler"
          ],
          "code_str": "BiasRelabler",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "empulse.samplers.bias_relabler.BiasRelabler"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.samplers.BiasRelabler",
        "ref_id": "biasrelabler",
        "headings": [
          "BiasRelabler"
        ]
      },
      "doc_lineno": 67
    },
    {
      "source": "import numpy as np\nfrom empulse.samplers import BiasRelabler\nfrom imblearn.pipeline import Pipeline\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification()\nclv = np.random.rand(y.size)\n\ndef to_high_clv(clv: np.ndarray) -> np.ndarray:\n    return (clv > np.median(clv)).astype(np.int8)\n\npipeline = Pipeline([\n    ('sampler', BiasRelabler(\n        LogisticRegression(),\n        transform_feature=to_high_clv\n    ).set_fit_resample_request(sensitive_feature=True)),\n    ('model', LogisticRegression())\n])\nparam_grid = {'model__C': np.logspace(-5, 2, 10)}\n\ngrid_search = GridSearchCV(pipeline, param_grid=param_grid)\ngrid_search.fit(X, y, sensitive_feature=clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasRelabler"
          ],
          "code_str": "BiasRelabler",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.samplers.bias_relabler.BiasRelabler"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline"
          ],
          "code_str": "imblearn.pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "imblearn.pipeline"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "numpy",
            "ndarray"
          ],
          "code_str": "np.ndarray",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.ndarray"
        },
        {
          "import_components": [
            "numpy",
            "ndarray"
          ],
          "code_str": "np.ndarray",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.ndarray"
        },
        {
          "import_components": [
            "numpy",
            "ndarray",
            "()"
          ],
          "code_str": "clv",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.ndarray"
        },
        {
          "import_components": [
            "numpy",
            "ndarray",
            "()"
          ],
          "code_str": "clv",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.ndarray"
        },
        {
          "import_components": [
            "numpy",
            "median"
          ],
          "code_str": "np.median",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.median"
        },
        {
          "import_components": [
            "numpy",
            "ndarray",
            "()"
          ],
          "code_str": "clv",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.ndarray"
        },
        {
          "import_components": [
            "numpy",
            "int8"
          ],
          "code_str": "np.int8",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.int8"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasRelabler"
          ],
          "code_str": "BiasRelabler",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "empulse.samplers.bias_relabler.BiasRelabler"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "numpy",
            "logspace"
          ],
          "code_str": "np.logspace",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "numpy.logspace"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "grid_search",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.samplers.BiasRelabler",
        "ref_id": "biasrelabler",
        "headings": [
          "BiasRelabler"
        ]
      },
      "doc_lineno": 93
    }
  ],
  "reference/generated/empulse.samplers.BiasResampler": [
    {
      "source": "import numpy as np\nfrom empulse.samplers import BiasResampler\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification()\nhigh_clv = np.random.randint(0, 2, y.shape)\n\nsampler = BiasResampler()\nsampler.fit_resample(X, y, sensitive_feature=high_clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasResampler"
          ],
          "code_str": "BiasResampler",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.samplers.bias_resampler.BiasResampler"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasResampler"
          ],
          "code_str": "BiasResampler",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "empulse.samplers.bias_resampler.BiasResampler"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasResampler",
            "()"
          ],
          "code_str": "sampler",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "empulse.samplers.bias_resampler.BiasResampler"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.samplers.BiasResampler",
        "ref_id": "biasresampler",
        "headings": [
          "BiasResampler"
        ]
      },
      "doc_lineno": 55
    },
    {
      "source": "import numpy as np\nfrom empulse.samplers import BiasResampler\nfrom imblearn.pipeline import Pipeline\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification()\nhigh_clv = np.random.randint(0, 2, y.shape)\n\npipeline = Pipeline([\n    ('sampler', BiasResampler().set_fit_resample_request(sensitive_feature=True)),\n    ('model', LogisticRegression())\n])\n\ncross_val_score(pipeline, X, y, params={'sensitive_feature': high_clv})",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasResampler"
          ],
          "code_str": "BiasResampler",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.samplers.bias_resampler.BiasResampler"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline"
          ],
          "code_str": "imblearn.pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "imblearn.pipeline"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randint"
          ],
          "code_str": "np.random.randint",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.randint"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasResampler"
          ],
          "code_str": "BiasResampler",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "empulse.samplers.bias_resampler.BiasResampler"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "cross_val_score"
          ],
          "code_str": "cross_val_score",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "sklearn.model_selection.cross_val_score"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.samplers.BiasResampler",
        "ref_id": "biasresampler",
        "headings": [
          "BiasResampler"
        ]
      },
      "doc_lineno": 69
    },
    {
      "source": "import numpy as np\nfrom empulse.samplers import BiasResampler\nfrom imblearn.pipeline import Pipeline\nfrom sklearn import set_config\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\n\nset_config(enable_metadata_routing=True)\n\nX, y = make_classification()\nclv = np.random.rand(y.size)\n\ndef to_high_clv(clv: np.ndarray) -> np.ndarray:\n    return (clv > np.median(clv)).astype(np.int8)\n\npipeline = Pipeline([\n    ('sampler', BiasResampler(\n        transform_feature=to_high_clv\n    ).set_fit_resample_request(sensitive_feature=True)),\n    ('model', LogisticRegression())\n])\nparam_grid = {'model__C': np.logspace(-5, 2, 10)}\n\ngrid_search = GridSearchCV(pipeline, param_grid=param_grid)\ngrid_search.fit(X, y, sensitive_feature=clv)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasResampler"
          ],
          "code_str": "BiasResampler",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.samplers.bias_resampler.BiasResampler"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline"
          ],
          "code_str": "imblearn.pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "imblearn.pipeline"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn"
          ],
          "code_str": "sklearn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "sklearn"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model"
          ],
          "code_str": "sklearn.linear_model",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "sklearn.linear_model"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection"
          ],
          "code_str": "sklearn.model_selection",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "sklearn.model_selection"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "sklearn",
            "set_config"
          ],
          "code_str": "set_config",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "sklearn.set_config"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "numpy",
            "ndarray"
          ],
          "code_str": "np.ndarray",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.ndarray"
        },
        {
          "import_components": [
            "numpy",
            "ndarray"
          ],
          "code_str": "np.ndarray",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.ndarray"
        },
        {
          "import_components": [
            "numpy",
            "ndarray",
            "()"
          ],
          "code_str": "clv",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.ndarray"
        },
        {
          "import_components": [
            "numpy",
            "ndarray",
            "()"
          ],
          "code_str": "clv",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.ndarray"
        },
        {
          "import_components": [
            "numpy",
            "median"
          ],
          "code_str": "np.median",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.median"
        },
        {
          "import_components": [
            "numpy",
            "ndarray",
            "()"
          ],
          "code_str": "clv",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.ndarray"
        },
        {
          "import_components": [
            "numpy",
            "int8"
          ],
          "code_str": "np.int8",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.int8"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline"
          ],
          "code_str": "Pipeline",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "BiasResampler"
          ],
          "code_str": "BiasResampler",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "empulse.samplers.bias_resampler.BiasResampler"
        },
        {
          "import_components": [
            "sklearn",
            "linear_model",
            "LogisticRegression"
          ],
          "code_str": "LogisticRegression",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "sklearn.linear_model._logistic.LogisticRegression"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "numpy",
            "logspace"
          ],
          "code_str": "np.logspace",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "numpy.logspace"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV"
          ],
          "code_str": "GridSearchCV",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        },
        {
          "import_components": [
            "imblearn",
            "pipeline",
            "Pipeline",
            "()"
          ],
          "code_str": "pipeline",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "imblearn.pipeline.Pipeline"
        },
        {
          "import_components": [
            "sklearn",
            "model_selection",
            "GridSearchCV",
            "()"
          ],
          "code_str": "grid_search",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "sklearn.model_selection._search.GridSearchCV"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.samplers.BiasResampler",
        "ref_id": "biasresampler",
        "headings": [
          "BiasResampler"
        ]
      },
      "doc_lineno": 93
    }
  ],
  "reference/generated/empulse.samplers.CostSensitiveSampler": [
    {
      "source": "import numpy as np\nfrom empulse.samplers import CostSensitiveSampler\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification()\nfp_cost = np.ones_like(y) * 10\nfn_cost = np.ones_like(y)\n\nsampler = CostSensitiveSampler(method='oversampling', random_state=42)\nX_re, y_re = sampler.fit_resample(X, y, fp_cost=fp_cost, fn_cost=fn_cost)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "empulse",
            "samplers"
          ],
          "code_str": "empulse.samplers",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "empulse.samplers"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "sklearn",
            "datasets"
          ],
          "code_str": "sklearn.datasets",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "sklearn.datasets"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "sklearn",
            "datasets",
            "make_classification"
          ],
          "code_str": "make_classification",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "sklearn.datasets.make_classification"
        },
        {
          "import_components": [
            "numpy",
            "ones_like"
          ],
          "code_str": "np.ones_like",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.ones_like"
        },
        {
          "import_components": [
            "numpy",
            "ones_like"
          ],
          "code_str": "np.ones_like",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.ones_like"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler"
          ],
          "code_str": "CostSensitiveSampler",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        },
        {
          "import_components": [
            "empulse",
            "samplers",
            "CostSensitiveSampler",
            "()"
          ],
          "code_str": "sampler",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "empulse.samplers.cost_sampler.CostSensitiveSampler"
        }
      ],
      "example": {
        "document": "reference/generated/empulse.samplers.CostSensitiveSampler",
        "ref_id": "costsensitivesampler",
        "headings": [
          "CostSensitiveSampler"
        ]
      },
      "doc_lineno": 78
    }
  ],
  "reference/metrics": [],
  "reference/models": [],
  "reference/optimizers": [],
  "reference/samplers": []
}